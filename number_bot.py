# -*- coding: utf-8 -*-
import telebot
from telebot import types
from telebot.types import ReplyParameters, ChatMember # –î–æ–¥–∞–Ω–æ ChatMember —Ç–∞ ReplyParameters
import logging
import time
import re
import requests # –î–æ–¥–∞–Ω–æ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API –∫—É—Ä—Å—ñ–≤
import traceback
import decimal # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Decimal –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
# –í–ê–® –¢–û–ö–ï–ù (–ó–ê–ú–Ü–ù–Ü–¢–¨ –°–ü–†–ê–í–ñ–ù–Ü–ú –¢–û–ö–ï–ù–û–ú –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú)
BOT_TOKEN = "7533433379:AAFRvJMWalyoK2dNa_027V2I-hsXIJZ49J0" # !!! –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –°–ü–†–ê–í–ñ–ù–Ü–ú –¢–û–ö–ï–ù–û–ú !!!

# !!! –í–ê–ñ–õ–ò–í–û: –í–ö–ê–ñ–Ü–¢–¨ ID –ê–ë–û @USERNAME –í–ê–®–û–ì–û –ö–ê–ù–ê–õ–£ !!!
CHANNEL_ID = "@VirtualNumberNews" # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "@my_cool_channel" –∞–±–æ -1001234567890
# !!! –í–ê–ñ–õ–ò–í–û: –í–ö–ê–ñ–Ü–¢–¨ –ü–û–í–ù–ï –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –í–ê–® –ö–ê–ù–ê–õ !!!
CHANNEL_URL = "https://t.me/VirtualNumberNews" # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "https://t.me/my_cool_channel"

SUPPORT_CHAT_ID = -1002434683387      # ID —á–∞—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
CONFIRMATION_CHAT_ID = -1002562104639 # ID —á–∞—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤
ADMIN_ID = 1602736674            # ID –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞ (–≤–ª–∞—Å–Ω–∏–∫–∞) - –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º, —è–∫—â–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –π–¥–µ —á–µ—Ä–µ–∑ —á–∞—Ç–∏

PAYMENT_DETAILS = {
    'Privat24': '4149 6090 5872 2077',
    'Mono': '4441 1110 0101 3626',
    'Pumb': '5355 4252 1235 0423',
    'Abank': '4149 2504 4820 0252',
    'Crypto': 'USDT (TRC-20): TJWSS4QGKtqzNfUDasVrjAtZ6p25ucFrB7',
}

# !!! –í–ê–ñ–õ–ò–í–û: –û–Ω–æ–≤—ñ—Ç—å —Ü—ñ –∫—É—Ä—Å–∏ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏! !!!
# –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ UAH:
# –°–∫—ñ–ª—å–∫–∏ –æ–¥–∏–Ω–∏—Ü—å –¶–Ü–Ñ–á –≤–∞–ª—é—Ç–∏ –∫–æ—à—Ç—É—î 1 UAH
EXCHANGE_RATES_FROM_UAH = {
    'UAH': decimal.Decimal('1.0'),
    'USD': decimal.Decimal('1.0') / decimal.Decimal('40.50'), # ~0.02469 (–ü—Ä–∏–∫–ª–∞–¥!)
    'RUB': decimal.Decimal('1.0') / decimal.Decimal('0.45'),  # ~2.22222 (–ü—Ä–∏–∫–ª–∞–¥!)
}
# –°–∫—ñ–ª—å–∫–∏ UAH –∫–æ—à—Ç—É—î 1 –æ–¥–∏–Ω–∏—Ü—è –¶–Ü–Ñ–á –≤–∞–ª—é—Ç–∏
EXCHANGE_RATES_TO_UAH = {
    'UAH': decimal.Decimal('1.0'),
    'USD': decimal.Decimal('40.50'), # (–ü—Ä–∏–∫–ª–∞–¥!)
    'RUB': decimal.Decimal('0.45'),  # (–ü—Ä–∏–∫–ª–∞–¥!)
}


ABOUT_TEXT_RU = "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."
ABOUT_TEXT_UK = "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø–æ—Å–ª—É–≥–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤."
ABOUT_TEXT_EN = "We provide virtual number services."

DB_NAME = 'user_data.db' # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è SQLite)
logger = telebot.logger
telebot.logger.setLevel(logging.INFO) # –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è

# –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏
REJECT_WITHOUT_REASON_SYMBOL = "-"

texts = {
    'ru': {
        'start_greeting': "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏.\n–ë–∞–ª–∞–Ω—Å: {balance} {currency}\nID: {user_id}",
        'main_menu': "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        'profile': "üë§ –ü—Ä–æ—Ñ–∏–ª—å",
        'about': "‚ÑπÔ∏è –û –Ω–∞—Å",
        'settings': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        'support': "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        'buy_number': "üõí –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä",
        'deposit': "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
        'profile_info': "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance} {currency}",
        'settings_menu': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        'change_lang': "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'change_curr': "üí± –°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É",
        'select_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'lang_changed': "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π.",
        'select_curr': "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        'curr_changed': "‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}. –ë–∞–ª–∞–Ω—Å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {balance} {currency_symbol}", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'support_request': "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        'support_sent': "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        'support_reply': "‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{reply_text}",
        'support_message_to_admin': "üìå Support Request:\nUser ID: {user_id}\nUser Tag: @{username}\n\nMessage:\n{message_text}",
        'choose_country': "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –Ω–æ–º–µ—Ä–∞:",
        'country_selected': "–í—ã –≤—ã–±—Ä–∞–ª–∏ {country}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        'back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'lang_ru': "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        'lang_uk': "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        'lang_en': "üá¨üáß English",
        'curr_usd': "üá∫üá∏ USD",
        'curr_uah': "üá∫üá¶ UAH",
        'curr_rub': "üá∑üá∫ RUB",
        'country_ua': "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞",
        'country_de': "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è",
        'country_pl': "üáµüá± –ü–æ–ª—å—à–∞",
        'request_deposit_amount': "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ UAH (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100 –∏–ª–∏ 50.5):", # –£—Ç–æ—á–Ω–µ–Ω–æ –≤–∞–ª—é—Ç—É
        'invalid_deposit_amount': "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 50.5).",
        'select_payment_method': "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—É–º–º—ã {amount} {currency}:",
        'payment_instructions': """
‚úÖ **–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount} {currency} —á–µ—Ä–µ–∑ {method}:**

–†–µ–∫–≤–∏–∑–∏—Ç—ã: `{details}`

‚ùóÔ∏è **–í–ê–ñ–ù–û:**
1. –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¢–û–ß–ù–û–ô —Å—É–º–º—ã.
2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–æ—Ç–æ —á–µ–∫–∞ —Å—é–¥–∞ –≤ –±–æ—Ç.
3. –û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

üí¨ –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?
- –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ('–ü–æ–¥–¥–µ—Ä–∂–∫–∞').
        """,
        'awaiting_screenshot_message': "‚è≥ –û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã...",
        'screenshot_received_admin_notification': "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.",
        'admin_confirmation_message': """
üßæ **–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!**

User: {user_id} (@{username})
–ó–∞—è–≤–ª–µ–Ω–æ: {amount} {currency}
–ú–µ—Ç–æ–¥: {method}

‚è≥ *–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...*
        """,
        'admin_approve_prompt': "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ {currency} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}).\n–ó–∞—è–≤–ª–µ–Ω–æ: {requested_amount} {currency}.\n(–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –≤ –≤–∞–ª—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_currency})", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'admin_reject': "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        'admin_reject_comment': "üìù –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π", # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏
        'admin_approve': "‚úÖ –ó–∞—á–∏—Å–ª–∏—Ç—å", # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏
        'deposit_approved_user': "‚úÖ –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É {amount} {currency} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.", # –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç
        'deposit_rejected_user': "‚ùå –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞—è–≤–∫–∞: {amount} {currency}).", # –î–æ–¥–∞–Ω–æ —Å—É–º—É –∑–∞—è–≤–∫–∏
        'deposit_rejected_with_comment_user': "‚ùå –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (–∑–∞—è–≤–∫–∞: {amount} {currency}).\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", # –î–æ–¥–∞–Ω–æ —Å—É–º—É –∑–∞—è–≤–∫–∏
        'admin_rejection_reason_prompt': "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '{symbol}' (–º–∏–Ω—É—Å), –µ—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞.",
        'admin_action_confirmed_approve': "‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞—á–∏—Å–ª–µ–Ω–æ {credited_amount} {currency}.", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'admin_action_confirmed_reject': "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω (–±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω.",
        'admin_action_confirmed_reject_comment': "üìù –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω.",
        'deposit_cancelled': "üö´ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.",
        'invalid_step': "üòï –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.", # –î–æ–¥–∞–Ω–æ –ø—Ä–æ /cancel
        'callback_error': "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'payment_method_Privat24': "Privat24",
        'payment_method_Mono': "Monobank",
        'payment_method_Pumb': "–ü–£–ú–ë",
        'payment_method_Abank': "–ê-–ë–∞–Ω–∫",
        'payment_method_Crypto': "Crypto",
        'cancel_deposit': "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
        'back_to_methods': "‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞",
        'unknown_command': "üòï –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.",
        'error_sending_support': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'support_reply_failed': "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}",
        'support_user_not_found': "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
        'support_reply_sent': "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
        'start_needed': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        'callback_user_not_found': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start",
        'admin_not_awaiting_reason': "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø—Ä–∏—á–∏–Ω–æ–π.", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'admin_not_awaiting_approve_amount': "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.", # NEW
        'admin_not_awaiting_support_reply': "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", # NEW
        'invalid_approve_amount': "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 50.5).", # NEW
        'balance_update_failed_admin': "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.", # NEW
        'currency_conversion_error': "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã –∏–∑ {from_curr} –≤ {to_curr}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—É—Ä—Å—ã.", # NEW
        'admin_support_reply_prompt': "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}):", # NEW
        'support_reply_button': "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", # NEW
        'cancel_action': "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel
        'action_cancelled_user': "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        'no_active_action': "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel –∞–¥–º—ñ–Ω–∞ –±–µ–∑ —Å—Ç–∞–Ω—É
        'ABOUT_TEXT_RU': ABOUT_TEXT_RU,
        # --- –¢–µ–∫—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
        'subscribe_prompt': "‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
        'subscribe_button': "‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
        'check_subscription_button': "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        'subscription_needed': "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        'subscription_verified': "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
    },
    'uk': {
        'start_greeting': "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ–º–µ—Ä–∞–º–∏.\n–ë–∞–ª–∞–Ω—Å: {balance} {currency}\nID: {user_id}",
        'main_menu': "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        'profile': "üë§ –ü—Ä–æ—Ñ—ñ–ª—å",
        'about': "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å",
        'settings': "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        'support': "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞",
        'buy_number': "üõí –ö—É–ø–∏—Ç–∏ –Ω–æ–º–µ—Ä",
        'deposit': "üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏",
        'profile_info': "üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance} {currency}",
        'settings_menu': "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:",
        'change_lang': "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        'change_curr': "üí± –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É",
        'select_lang': "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'lang_changed': "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É.",
        'select_curr': "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:",
        'curr_changed': "‚úÖ –í–∞–ª—é—Ç—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {currency}. –ë–∞–ª–∞–Ω—Å —Å–∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ: {balance} {currency_symbol}", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'support_request': "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:",
        'support_sent': "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
        'support_reply': "‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{reply_text}",
        'support_message_to_admin': "üìå –ó–∞–ø–∏—Ç –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\nUser ID: {user_id}\nUser Tag: @{username}\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message_text}",
        'choose_country': "üåç –í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –¥–ª—è –Ω–æ–º–µ—Ä–∞:",
        'country_selected': "–í–∏ –æ–±—Ä–∞–ª–∏ {country}. –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∫—É–ø—ñ–≤–ª—ñ –ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.",
        'back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'lang_ru': "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞",
        'lang_uk': "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        'lang_en': "üá¨üáß English",
        'curr_usd': "üá∫üá∏ USD",
        'curr_uah': "üá∫üá¶ UAH",
        'curr_rub': "üá∑üá∫ RUB",
        'country_ua': "üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞",
        'country_de': "üá©üá™ –ù—ñ–º–µ—á—á–∏–Ω–∞",
        'country_pl': "üáµüá± –ü–æ–ª—å—â–∞",
        'request_deposit_amount': "‚û°Ô∏è –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤ UAH (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 100 –∞–±–æ 255.5):", # –£—Ç–æ—á–Ω–µ–Ω–æ –≤–∞–ª—é—Ç—É
        'invalid_deposit_amount': "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100 –∞–±–æ 255.5).",
        'select_payment_method': "üëá –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å—É–º–∏ {amount} {currency}:",
        'payment_instructions': """
‚úÖ **–î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ {amount} {currency} —á–µ—Ä–µ–∑ {method}:**

–†–µ–∫–≤—ñ–∑–∏—Ç–∏: `{details}`

‚ùóÔ∏è **–í–ê–ñ–õ–ò–í–û:**
1. –ó–¥—ñ–π—Å–Ω—ñ—Ç—å –ø–µ—Ä–µ–∫–∞–∑ –¢–û–ß–ù–û–á —Å—É–º–∏.
2. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ **–æ–±–æ–≤'—è–∑–∫–æ–≤–æ** –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç/—Ñ–æ—Ç–æ —á–µ–∫–∞ —Å—é–¥–∏ –≤ –±–æ—Ç.
3. –û–ø–ª–∞—Ç–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.

üí¨ –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç–∞?
- –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –±–∞–Ω–∫ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É (–∫–Ω–æ–ø–∫–∞ '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞').
        """,
        'awaiting_screenshot_message': "‚è≥ –û—á—ñ–∫—É—é –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç/—Ñ–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏...",
        'screenshot_received_admin_notification': "‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –í—ñ–¥–ø—Ä–∞–≤–∏–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è.",
        'admin_confirmation_message': """
üßæ **–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!**

User: {user_id} (@{username})
–ó–∞—è–≤–ª–µ–Ω–æ: {amount} {currency}
–ú–µ—Ç–æ–¥: {method}

‚è≥ *–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è...*
        """,
        'admin_approve_prompt': "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω—É —Å—É–º—É –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤ {currency} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} (@{username}).\n–ó–∞—è–≤–ª–µ–Ω–æ: {requested_amount} {currency}.\n(–ë–∞–ª–∞–Ω—Å –±—É–¥–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ —É –≤–∞–ª—é—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_currency})", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'admin_reject': "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
        'admin_reject_comment': "üìù –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑ –ø—Ä–∏—á–∏–Ω–æ—é", # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏
        'admin_approve': "‚úÖ –ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏", # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏
        'deposit_approved_user': "‚úÖ –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É {amount} {currency} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.", # –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç
        'deposit_rejected_user': "‚ùå –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞—è–≤–∫–∞: {amount} {currency}).", # –î–æ–¥–∞–Ω–æ —Å—É–º—É –∑–∞—è–≤–∫–∏
        'deposit_rejected_with_comment_user': "‚ùå –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ (–∑–∞—è–≤–∫–∞: {amount} {currency}).\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", # –î–æ–¥–∞–Ω–æ —Å—É–º—É –∑–∞—è–≤–∫–∏
        'admin_rejection_reason_prompt': "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å '{symbol}' (–º—ñ–Ω—É—Å), —è–∫—â–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞.",
        'admin_action_confirmed_approve': "‚úÖ –ü–ª–∞—Ç—ñ–∂ —Å—Ö–≤–∞–ª–µ–Ω–æ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {credited_amount} {currency}.", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'admin_action_confirmed_reject': "‚ùå –ü–ª–∞—Ç—ñ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ (–±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏). –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Å–ø–æ–≤—ñ—â–µ–Ω–æ.",
        'admin_action_confirmed_reject_comment': "üìù –ü–ª–∞—Ç—ñ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Å–ø–æ–≤—ñ—â–µ–Ω–æ.",
        'deposit_cancelled': "üö´ –ü—Ä–æ—Ü–µ—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        'invalid_step': "üòï –°—Ö–æ–∂–µ, –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è –∑—Ä–æ–±–∏—Ç–∏ —â–æ—Å—å –Ω–µ —Ç–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel.", # –î–æ–¥–∞–Ω–æ –ø—Ä–æ /cancel
        'callback_error': "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        'payment_method_Privat24': "Privat24",
        'payment_method_Mono': "Monobank",
        'payment_method_Pumb': "–ü–£–ú–ë",
        'payment_method_Abank': "–ê-–ë–∞–Ω–∫",
        'payment_method_Crypto': "Crypto",
        'cancel_deposit': "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è",
        'back_to_methods': "‚¨ÖÔ∏è –î–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É",
        'unknown_command': "üòï –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ —Ç–µ–∫—Å—Ç.",
        'error_sending_support': "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
        'support_reply_failed': "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}",
        'support_user_not_found': "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—ñ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
        'support_reply_sent': "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}",
        'start_needed': "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.",
        'callback_user_not_found': "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start",
        'admin_not_awaiting_reason': "–í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏—á–∏–Ω–æ—é.", # –û–Ω–æ–≤–ª–µ–Ω–æ
        'admin_not_awaiting_approve_amount': "–í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è.", # NEW
        'admin_not_awaiting_support_reply': "–í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", # NEW
        'invalid_approve_amount': "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100 –∞–±–æ 50.5).", # NEW
        'balance_update_failed_admin': "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.", # NEW
        'currency_conversion_error': "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç–∏ –∑ {from_curr} –≤ {to_curr}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫—É—Ä—Å–∏.", # NEW
        'admin_support_reply_prompt': "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} (@{username}):", # NEW
        'support_reply_button': "‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", # NEW
        'cancel_action': "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel
        'action_cancelled_user': "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        'no_active_action': "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—ñ—ó –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel –∞–¥–º—ñ–Ω–∞ –±–µ–∑ —Å—Ç–∞–Ω—É
        'ABOUT_TEXT_UK': ABOUT_TEXT_UK,
        # --- –¢–µ–∫—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
        'subscribe_prompt': "‚ùóÔ∏è –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
        'subscribe_button': "‚û°Ô∏è –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å",
        'check_subscription_button': "‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è / –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
        'subscription_needed': "‚ùå –ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
        'subscription_verified': "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.",
    },
    'en': {
        'start_greeting': "üëã Hi! I'm your number bot.\nBalance: {balance} {currency}\nID: {user_id}",
        'main_menu': "Main Menu:",
        'profile': "üë§ Profile",
        'about': "‚ÑπÔ∏è About Us",
        'settings': "‚öôÔ∏è Settings",
        'support': "üí¨ Support",
        'buy_number': "üõí Buy Number",
        'deposit': "üí∞ Deposit",
        'profile_info': "üë§ Your Profile:\nID: {user_id}\nBalance: {balance} {currency}",
        'settings_menu': "‚öôÔ∏è Settings:",
        'change_lang': "üåê Change Language",
        'change_curr': "üí± Change Currency",
        'select_lang': "Select language:",
        'lang_changed': "‚úÖ Language changed to English.",
        'select_curr': "Select currency:",
        'curr_changed': "‚úÖ Currency changed to {currency}. Balance converted: {balance} {currency_symbol}", # Updated
        'support_request': "‚úçÔ∏è Write your message for support:",
        'support_sent': "‚úÖ Your message has been sent to support.",
        'support_reply': "‚úâÔ∏è Reply from support:\n\n{reply_text}",
        'support_message_to_admin': "üìå Support Request:\nUser ID: {user_id}\nUser Tag: @{username}\n\nMessage:\n{message_text}",
        'choose_country': "üåç Choose country for the number:",
        'country_selected': "You selected {country}. Purchase functionality is under development.",
        'back': "‚¨ÖÔ∏è Back",
        'lang_ru': "üá∑üá∫ Russian",
        'lang_uk': "üá∫üá¶ Ukrainian",
        'lang_en': "üá¨üáß English",
        'curr_usd': "üá∫üá∏ USD",
        'curr_uah': "üá∫üá¶ UAH",
        'curr_rub': "üá∑üá∫ RUB",
        'country_ua': "üá∫üá¶ Ukraine",
        'country_de': "üá©üá™ Germany",
        'country_pl': "üáµüá± Poland",
        'request_deposit_amount': "‚û°Ô∏è Enter the amount to deposit in UAH (numbers only, e.g., 100 or 50.5):", # Clarified currency
        'invalid_deposit_amount': "‚ùå Invalid amount. Please enter a positive number (e.g., 100 or 50.5).",
        'select_payment_method': "üëá Choose payment method for {amount} {currency}:",
        'payment_instructions': """
‚úÖ **To deposit {amount} {currency} via {method}:**

Details: `{details}`

‚ùóÔ∏è **IMPORTANT:**
1. Transfer the EXACT amount.
2. After payment, **must** send a screenshot/photo of the receipt here in the bot.
3. Payment is processed manually, please wait for confirmation.

üí¨ Payment issues?
- Choose another bank or contact support ('Support' button).
        """,
        'awaiting_screenshot_message': "‚è≥ Waiting for the payment confirmation screenshot/photo...",
        'screenshot_received_admin_notification': "‚úÖ Screenshot received! Sent to the administrator for verification. Please wait for the credit.",
        'admin_confirmation_message': """
üßæ **Deposit Request!**

User: {user_id} (@{username})
Requested: {amount} {currency}
Method: {method}

‚è≥ *Awaiting confirmation...*
        """,
        'admin_approve_prompt': "‚úçÔ∏è Enter the exact credit amount in {currency} for user {user_id} ({username}).\nRequested: {requested_amount} {currency}.\n(Balance will be credited in user's currency: {user_currency})", # Updated
        'admin_reject': "‚ùå Reject",
        'admin_reject_comment': "üìù Reject with reason", # Changed button text
        'admin_approve': "‚úÖ Credit", # Changed button text
        'deposit_approved_user': "‚úÖ Your deposit of {amount} {currency} has been confirmed! Balance updated.", # Updated text
        'deposit_rejected_user': "‚ùå Your deposit was rejected by the administrator (request: {amount} {currency}).", # Added request amount
        'deposit_rejected_with_comment_user': "‚ùå Your deposit was rejected (request: {amount} {currency}).\nReason: {reason}", # Added request amount
        'admin_rejection_reason_prompt': "‚úçÔ∏è Enter the rejection reason for user {user_id}.\nSend '{symbol}' (minus) if no reason is needed.",
        'admin_action_confirmed_approve': "‚úÖ Payment approved. User {user_id} credited with {credited_amount} {currency}.", # Updated
        'admin_action_confirmed_reject': "‚ùå Payment rejected (no reason provided). User {user_id} notified.",
        'admin_action_confirmed_reject_comment': "üìù Payment rejected with comment. User {user_id} notified.",
        'deposit_cancelled': "üö´ Deposit process cancelled.",
        'invalid_step': "üòï It seems you're trying to do something out of sequence. Please try starting again or use /cancel.", # Added /cancel hint
        'callback_error': "‚ö†Ô∏è An error occurred while processing your selection. Please try again.",
        'payment_method_Privat24': "Privat24",
        'payment_method_Mono': "Monobank",
        'payment_method_Pumb': "PUMB",
        'payment_method_Abank': "A-Bank",
        'payment_method_Crypto': "Crypto",
        'cancel_deposit': "üö´ Cancel Deposit",
        'back_to_methods': "‚¨ÖÔ∏è Back to Methods",
        'unknown_command': "üòï Unknown command or text.",
        'error_sending_support': "‚ùå An error occurred while sending the message. Please try again later.",
        'support_reply_failed': "‚ö†Ô∏è Failed to send reply to user {user_id}: {e}",
        'support_user_not_found': "‚ö†Ô∏è Could not find the original user for this reply.",
        'support_reply_sent': "‚úÖ Reply sent to user {user_id}",
        'start_needed': "Please type /start to begin.",
        'callback_user_not_found': "Please press /start",
        'admin_not_awaiting_reason': "You are not currently in the process of rejecting with reason.", # Updated
        'admin_not_awaiting_approve_amount': "You are not currently in the process of entering the crediting amount.", # NEW
        'admin_not_awaiting_support_reply': "You are not currently in the process of replying to a user.", # NEW
        'invalid_approve_amount': "‚ùå Invalid amount. Enter a positive number (e.g., 100 or 50.5).", # NEW
        'balance_update_failed_admin': "‚ö†Ô∏è Failed to update user's balance {user_id}.", # NEW
        'currency_conversion_error': "‚ö†Ô∏è Currency conversion error from {from_curr} to {to_curr}. Please check exchange rates.", # NEW
        'admin_support_reply_prompt': "‚úçÔ∏è Enter the reply text for user {user_id} (@{username}):", # NEW
        'support_reply_button': "‚úâÔ∏è Reply", # NEW
        'cancel_action': "üö´ Action cancelled.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel
        'action_cancelled_user': "üö´ Action cancelled.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel user
        'no_active_action': "No active action to cancel.", # NEW - –¢–µ–∫—Å—Ç –¥–ª—è /cancel admin no state
        'ABOUT_TEXT_EN': ABOUT_TEXT_EN,
         # --- Texts for subscription check ---
        'subscribe_prompt': "‚ùóÔ∏è To use the bot, you need to subscribe to our channel.",
        'subscribe_button': "‚û°Ô∏è Subscribe",
        'check_subscription_button': "‚úÖ I subscribed / Check subscription",
        'subscription_needed': "‚ùå Subscription not found. Please subscribe to the channel and click the check button.",
        'subscription_verified': "‚úÖ Thank you for subscribing! You can now use the bot.",
    }
}


currencies = {
    'USD': '$',
    'UAH': '‚Ç¥',
    'RUB': '‚ÇΩ'
}

# --- –§—É–Ω–∫—Ü—ñ—ó ---
def get_text(key, lang='uk'):
    """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç –∑–∞ –∫–ª—é—á–µ–º —Ç–∞ –º–æ–≤–æ—é."""
    lang_dict = texts.get(lang, texts['uk']) # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º uk
    text = lang_dict.get(key)
    # –Ø–∫—â–æ –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –º–æ–≤—ñ, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ –≤ uk
    if text is None and lang != 'uk':
        lang_dict_fallback = texts.get('uk', {})
        text = lang_dict_fallback.get(key)
    # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Ä–∫–µ—Ä –ø–æ–º–∏–ª–∫–∏
    if text is None:
        text = f"<'{key}'_not_found>"
        logger.warning(f"Text key '{key}' not found for language '{lang}' or default 'uk'.")
    return text

def get_currency_symbol(curr_code='UAH'):
    """–û—Ç—Ä–∏–º—É—î —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –∑–∞ —ó—ó –∫–æ–¥–æ–º."""
    return currencies.get(curr_code, '¬§') # –ü–æ–≤–µ—Ä—Ç–∞—î '¬§' —è–∫—â–æ –∫–æ–¥ –Ω–µ–≤—ñ–¥–æ–º–∏–π

# --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–∞ –°—Ç–∞–Ω –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞/–ê–¥–º—ñ–Ω–∞ ---
temp_user_db = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∑–∞–º—ñ—Å—Ç—å –ë–î)
support_message_map = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–≤'—è–∑–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ {message_id_–≤_—á–∞—Ç—ñ_–ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {'user_id': ..., 'username': ...}}
user_states = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id: {'state': 'some_state', 'data': {...}}}
confirmation_message_map = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤ {text_message_id_–≤_—á–∞—Ç—ñ_–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {'user_id': ..., 'amount': ..., ...}}
admin_states = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id: {'state': '...', 'data': {...}}}

def initialize_db():
    logger.info("DB Initialized (In-memory Placeholder)")

def add_user_if_not_exists(user_id, username):
    """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î, –∞–±–æ –æ–Ω–æ–≤–ª—é—î username."""
    username_str = str(username) if username is not None else "None"
    if user_id not in temp_user_db:
        temp_user_db[user_id] = {
            'username': username_str,
            'balance': decimal.Decimal('0.00'), # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Decimal
            'language': 'uk',
            'currency': 'UAH'
        }
        logger.info(f"Added user {user_id} (@{username_str})")
        return True
    else:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è username —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
        updated = False
        if temp_user_db[user_id].get('username') != username_str:
            temp_user_db[user_id]['username'] = username_str
            updated = True
        if 'language' not in temp_user_db[user_id]:
            temp_user_db[user_id]['language'] = 'uk'
            updated = True
        if 'currency' not in temp_user_db[user_id]:
            temp_user_db[user_id]['currency'] = 'UAH'
            updated = True
        if 'balance' not in temp_user_db[user_id]:
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π float –Ω–∞ Decimal, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            current_balance = temp_user_db[user_id].get('balance', 0.0)
            try:
                temp_user_db[user_id]['balance'] = decimal.Decimal(str(current_balance))
            except decimal.InvalidOperation:
                temp_user_db[user_id]['balance'] = decimal.Decimal('0.00')
            updated = True
        elif not isinstance(temp_user_db[user_id]['balance'], decimal.Decimal):
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π float –Ω–∞ Decimal, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            try:
                temp_user_db[user_id]['balance'] = decimal.Decimal(str(temp_user_db[user_id]['balance']))
            except decimal.InvalidOperation:
                temp_user_db[user_id]['balance'] = decimal.Decimal('0.00')
            updated = True

        if updated:
            logger.info(f"Checked/Updated user data for user {user_id} (@{username_str})")
    return False


def get_user_data(user_id):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_data = temp_user_db.get(user_id)
    if user_data:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        if 'language' not in user_data: user_data['language'] = 'uk'
        if 'currency' not in user_data: user_data['currency'] = 'UAH'
        if 'username' not in user_data: user_data['username'] = "None"
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –Ω–∞ Decimal, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ —î –Ω–∏–º
        if 'balance' not in user_data:
            user_data['balance'] = decimal.Decimal('0.00')
        elif not isinstance(user_data['balance'], decimal.Decimal):
            try:
                user_data['balance'] = decimal.Decimal(str(user_data['balance']))
            except decimal.InvalidOperation:
                logger.error(f"Failed to convert balance to Decimal for user {user_id}. Resetting to 0.")
                user_data['balance'] = decimal.Decimal('0.00')
    return user_data

def update_user_language(user_id, lang_code):
    """–û–Ω–æ–≤–ª—é—î –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if user_id in temp_user_db:
        temp_user_db[user_id]['language'] = lang_code
        logger.info(f"Updated language for {user_id} to {lang_code}")
        return True
    logger.warning(f"Attempt to update language for non-existent user {user_id}")
    return False

def convert_currency(amount: decimal.Decimal, from_curr: str, to_curr: str) -> decimal.Decimal | None:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—É–º—É –∑ –æ–¥–Ω—ñ—î—ó –≤–∞–ª—é—Ç–∏ –≤ —ñ–Ω—à—É —á–µ—Ä–µ–∑ UAH."""
    if from_curr == to_curr:
        return amount

    try:
        # 1. –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∑ from_curr –≤ UAH
        if from_curr == 'UAH':
            amount_in_uah = amount
        else:
            rate_to_uah = EXCHANGE_RATES_TO_UAH.get(from_curr)
            if rate_to_uah is None:
                raise KeyError(f"Missing exchange rate TO UAH for currency: {from_curr}")
            amount_in_uah = amount * rate_to_uah

        # 2. –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∑ UAH –≤ to_curr
        if to_curr == 'UAH':
            final_amount = amount_in_uah
        else:
            rate_from_uah = EXCHANGE_RATES_FROM_UAH.get(to_curr)
            if rate_from_uah is None:
                raise KeyError(f"Missing exchange rate FROM UAH for currency: {to_curr}")
            final_amount = amount_in_uah * rate_from_uah

        # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
        return final_amount.quantize(decimal.Decimal('0.01'), rounding=decimal.ROUND_HALF_UP)

    except KeyError as e:
        logger.error(f"Currency conversion error ({from_curr} -> {to_curr}): {e}. Check EXCHANGE_RATES dictionaries.")
        return None
    except (ValueError, TypeError, decimal.InvalidOperation, ZeroDivisionError) as e:
        logger.error(f"Currency conversion error ({from_curr} -> {to_curr}): {e}")
        return None


def update_user_currency(user_id, new_curr_code):
    """–û–Ω–æ–≤–ª—é—î –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¢–ê –ö–û–ù–í–ï–†–¢–£–Ñ –ë–ê–õ–ê–ù–°."""
    user_data = get_user_data(user_id)
    if not user_data:
        logger.warning(f"Attempt to update currency for non-existent user {user_id}")
        return False, None # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ False —Ç–∞ None –¥–ª—è –±–∞–ª–∞–Ω—Å—É

    old_curr_code = user_data.get('currency', 'UAH')
    current_balance = user_data.get('balance', decimal.Decimal('0.00'))

    if old_curr_code == new_curr_code:
        logger.info(f"Currency for user {user_id} is already {new_curr_code}. No conversion needed.")
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –±–∞–ª–∞–Ω—Å - Decimal
        if not isinstance(current_balance, decimal.Decimal):
            try:
                temp_user_db[user_id]['balance'] = decimal.Decimal(str(current_balance))
            except decimal.InvalidOperation:
                temp_user_db[user_id]['balance'] = decimal.Decimal('0.00')
        return True, temp_user_db[user_id]['balance'] # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True —Ç–∞ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å

    new_balance = convert_currency(current_balance, old_curr_code, new_curr_code)

    if new_balance is not None:
        temp_user_db[user_id]['currency'] = new_curr_code
        temp_user_db[user_id]['balance'] = new_balance
        logger.info(f"Updated currency for {user_id} to {new_curr_code}. Balance converted from {current_balance} {old_curr_code} to {new_balance} {new_curr_code}")
        return True, new_balance # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True —Ç–∞ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
    else:
        # –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Å—Ç–∞–ª–∞—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ convert_currency —ñ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        return False, current_balance # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ False —Ç–∞ —Å—Ç–∞—Ä–∏–π –±–∞–ª–∞–Ω—Å


def update_user_balance(user_id, amount_change, currency_code):
    """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°—É–º–∞ `amount_change` –º–∞—î –±—É—Ç–∏ —É –≤–∞–ª—é—Ç—ñ `currency_code`."""
    user_data = get_user_data(user_id)
    if not user_data:
        logger.warning(f"Attempt to update balance for non-existent user {user_id}")
        return False

    user_currency = user_data.get('currency', 'UAH')

    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å - Decimal
    current_balance = user_data.get('balance', decimal.Decimal('0.00'))
    if not isinstance(current_balance, decimal.Decimal):
        try:
            current_balance = decimal.Decimal(str(current_balance))
        except decimal.InvalidOperation:
            logger.error(f"Invalid current balance format for user {user_id}. Resetting to 0.")
            current_balance = decimal.Decimal('0.00')

    try:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Å—É–º–∞ –∑–º—ñ–Ω–∏ - Decimal
        amount_to_add_decimal = decimal.Decimal(str(amount_change))

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–æ –≤–∞–ª—é—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if currency_code != user_currency:
            converted_amount = convert_currency(amount_to_add_decimal, currency_code, user_currency)
            if converted_amount is None:
                # –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞ –≤ convert_currency
                logger.error(f"Failed to convert deposit amount for user {user_id} from {currency_code} to {user_currency}.")
                return False # –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
            amount_in_user_currency = converted_amount
            logger.info(f"Converted balance update amount {amount_to_add_decimal} {currency_code} to {amount_in_user_currency} {user_currency} for user {user_id}")
        else:
            amount_in_user_currency = amount_to_add_decimal # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞

        new_balance = (current_balance + amount_in_user_currency).quantize(decimal.Decimal('0.01'), rounding=decimal.ROUND_HALF_UP)
        temp_user_db[user_id]['balance'] = new_balance

        logger.info(f"Updated balance for {user_id} by {amount_in_user_currency:.2f} {user_currency}. New balance: {new_balance:.2f} {user_currency}")
        return True
    except (ValueError, TypeError, decimal.InvalidOperation) as e:
        logger.error(f"Invalid amount type or value for balance update for {user_id}: {amount_change}. Error: {e}")
        return False


def set_user_state(user_id, state, data=None):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if data is None:
        data = {}
    user_states[user_id] = {'state': state, 'data': data}
    logger.info(f"Set user state for {user_id} to {state} with data {data}")

def get_user_state(user_id):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    return user_states.get(user_id)

def clear_user_state(user_id):
    """–û—á–∏—â—É—î —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if user_id in user_states:
        del user_states[user_id]
        logger.info(f"Cleared user state for {user_id}")

def set_admin_state(admin_id, state, data=None):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if data is None: data = {}
    admin_states[admin_id] = {'state': state, 'data': data}
    logger.info(f"Set admin state for {admin_id} to {state} with data {data}")

def get_admin_state(admin_id):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    return admin_states.get(admin_id)

def clear_admin_state(admin_id):
    """–û—á–∏—â—É—î —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if admin_id in admin_states:
        del admin_states[admin_id]
        logger.info(f"Cleared admin state for {admin_id}")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –§—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
def check_subscription(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –∫–∞–Ω–∞–ª CHANNEL_ID."""
    if not CHANNEL_ID:
        logger.warning("CHANNEL_ID is not set. Skipping subscription check.")
        return True # –Ø–∫—â–æ –∫–∞–Ω–∞–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–≤–∞–∂–∞—î–º–æ, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞
    try:
        member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        logger.debug(f"Checked subscription for user {user_id}. Status: {member.status}")
        # –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏: creator, administrator, member
        return member.status not in ['left', 'kicked']
    except telebot.apihelper.ApiTelegramException as e:
        # –ú–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏:
        # - "Bad Request: user not found" (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∑–∞—î–º–æ–¥—ñ—è–≤ –∑ –±–æ—Ç–æ–º –∞–±–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –π–æ–≥–æ?)
        # - "Bad Request: chat not found" (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CHANNEL_ID –∞–±–æ –±–æ—Ç –Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ)
        # - "Forbidden: bot is not a member of the channel chat" (–±–æ—Ç –Ω–µ –∞–¥–º—ñ–Ω –∫–∞–Ω–∞–ª—É)
        logger.error(f"Could not check subscription for user {user_id} in channel {CHANNEL_ID}: {e}")
        return False # –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤–≤–∞–∂–∞—î–º–æ, —â–æ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    except Exception as e:
        logger.error(f"Unexpected error checking subscription for user {user_id}: {e}")
        return False # –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤–≤–∞–∂–∞—î–º–æ, —â–æ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π

def get_subscribe_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Ç—É –ø—ñ–¥–ø–∏—Å–∫–∏."""
    markup = types.InlineKeyboardMarkup()
    subscribe_btn = types.InlineKeyboardButton(
        text=get_text('subscribe_button', lang),
        url=CHANNEL_URL
    )
    check_btn = types.InlineKeyboardButton(
        text=get_text('check_subscription_button', lang),
        callback_data='check_subscription_callback'
    )
    markup.add(subscribe_btn)
    markup.add(check_btn)
    return markup

def send_subscribe_prompt(chat_id, lang):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–º–æ–≥–æ—é –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è."""
    try:
        bot.send_message(
            chat_id,
            get_text('subscribe_prompt', lang),
            reply_markup=get_subscribe_keyboard(lang),
            parse_mode='Markdown' # –ê–±–æ HTML, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É
        )
        logger.info(f"Sent subscription prompt to user {chat_id}")
    except Exception as e:
        logger.error(f"Failed to send subscription prompt to user {chat_id}: {e}")

def send_subscribe_prompt_in_callback(call, lang):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–º–æ–≥–æ—é –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback."""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–∫—Ä—É—Ç–∏—Ç–∏—Å—è"
        bot.answer_callback_query(call.id, get_text('subscription_needed', lang), show_alert=True)
        # –ü–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∞–±–æ —Ä–µ–¥–∞–≥—É—î–º–æ —ñ—Å–Ω—É—é—á–µ, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
        # –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –∫—Ä–∞—â–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ, –±–æ —Å—Ç–∞—Ä–µ –º–æ–≥–ª–æ –±—É—Ç–∏ –Ω–µ —Ç–∏–º, —â–æ —Ç—Ä–µ–±–∞
        send_subscribe_prompt(call.message.chat.id, lang)
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –Ω–∞ —è–∫–µ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏
        # try:
        #     bot.delete_message(call.message.chat.id, call.message.message_id)
        # except Exception as e_del:
        #     logger.warning(f"Could not delete original message {call.message.message_id} after failed subscription check callback: {e_del}")

    except Exception as e:
        logger.error(f"Failed to send subscription prompt in callback for user {call.from_user.id}: {e}")

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def get_main_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_profile = types.KeyboardButton(get_text('profile', lang))
    btn_settings = types.KeyboardButton(get_text('settings', lang))
    btn_buy = types.KeyboardButton(get_text('buy_number', lang))
    btn_deposit = types.KeyboardButton(get_text('deposit', lang))
    btn_support = types.KeyboardButton(get_text('support', lang))
    btn_about = types.KeyboardButton(get_text('about', lang))
    markup.add(btn_profile, btn_settings)
    markup.add(btn_buy, btn_deposit)
    markup.add(btn_support, btn_about)
    return markup

def get_settings_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_lang = types.InlineKeyboardButton(get_text('change_lang', lang), callback_data='settings_change_lang')
    btn_curr = types.InlineKeyboardButton(get_text('change_curr', lang), callback_data='settings_change_curr')
    btn_back = types.InlineKeyboardButton(get_text('back', lang), callback_data='settings_back')
    markup.add(btn_lang, btn_curr, btn_back)
    return markup

def get_language_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–æ–≤–∏."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_ru = types.InlineKeyboardButton(get_text('lang_ru', lang), callback_data='set_lang_ru')
    btn_uk = types.InlineKeyboardButton(get_text('lang_uk', lang), callback_data='set_lang_uk')
    btn_en = types.InlineKeyboardButton(get_text('lang_en', lang), callback_data='set_lang_en')
    btn_back = types.InlineKeyboardButton(get_text('back', lang), callback_data='lang_back')
    markup.add(btn_ru, btn_uk, btn_en, btn_back)
    return markup

def get_currency_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_usd = types.InlineKeyboardButton(get_text('curr_usd', lang), callback_data='set_curr_USD')
    btn_uah = types.InlineKeyboardButton(get_text('curr_uah', lang), callback_data='set_curr_UAH')
    btn_rub = types.InlineKeyboardButton(get_text('curr_rub', lang), callback_data='set_curr_RUB')
    btn_back = types.InlineKeyboardButton(get_text('back', lang), callback_data='curr_back')
    markup.add(btn_usd, btn_uah, btn_rub, btn_back)
    return markup

def get_country_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –∫—Ä–∞—ó–Ω–∏ (–¥–ª—è –∫—É–ø—ñ–≤–ª—ñ)."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_ua = types.InlineKeyboardButton(get_text('country_ua', lang), callback_data='buy_country_UA')
    btn_de = types.InlineKeyboardButton(get_text('country_de', lang), callback_data='buy_country_DE')
    btn_pl = types.InlineKeyboardButton(get_text('country_pl', lang), callback_data='buy_country_PL')
    btn_back = types.InlineKeyboardButton(get_text('back', lang), callback_data='buy_back')
    markup.add(btn_ua, btn_de, btn_pl, btn_back)
    return markup

def get_back_button(callback_data, lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–¥–Ω—ñ—î—é –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"."""
    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton(get_text('back', lang), callback_data=callback_data)
    markup.add(btn_back)
    return markup

def get_payment_method_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for method_code, _ in PAYMENT_DETAILS.items():
        buttons.append(types.InlineKeyboardButton(
            get_text(f'payment_method_{method_code}', lang),
            callback_data=f'select_method_{method_code}'
        ))
    markup.add(*buttons)
    markup.row(types.InlineKeyboardButton(get_text('cancel_deposit', lang), callback_data='cancel_deposit_amount'))
    return markup

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —á–∞—Ç—ñ–≤ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó ---

def get_admin_confirmation_keyboard(lang='uk', text_msg_id=None):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω–∞ (–ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏/–í—ñ–¥—Ö–∏–ª–∏—Ç–∏/–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑ –ø—Ä–∏—á–∏–Ω–æ—é)."""
    if text_msg_id is None:
        logger.error("Cannot create admin confirmation keyboard without text_msg_id")
        return None
    markup = types.InlineKeyboardMarkup(row_width=3)
    btn_approve = types.InlineKeyboardButton(
        get_text('admin_approve', lang), # "‚úÖ –ó–∞—Ä–∞—Ö—É–≤–∞—Ç–∏"
        callback_data=f'confirm_{text_msg_id}_approve_prompt' # –ó–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É —Å—É–º–∏
    )
    btn_reject = types.InlineKeyboardButton(
        get_text('admin_reject', lang), # "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏"
        callback_data=f'confirm_{text_msg_id}_reject_now' # –ó–º—ñ–Ω–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
    )
    btn_reject_comment = types.InlineKeyboardButton(
        get_text('admin_reject_comment', lang), # "üìù –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑ –ø—Ä–∏—á–∏–Ω–æ—é"
        callback_data=f'confirm_{text_msg_id}_reject_comment' # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è
    )
    markup.add(btn_approve, btn_reject, btn_reject_comment)
    return markup

def get_support_reply_keyboard(lang='uk', target_user_id=None, support_msg_id=None):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏' –¥–ª—è —á–∞—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."""
    if target_user_id is None or support_msg_id is None:
        logger.error("Cannot create support reply keyboard without target_user_id and support_msg_id")
        return None
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_reply = types.InlineKeyboardButton(
        get_text('support_reply_button', lang), # "‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"
        callback_data=f'reply_support_{target_user_id}_{support_msg_id}'
    )
    markup.add(btn_reply)
    return markup

# -----------------------------------------

def get_cancel_deposit_keyboard(lang='uk'):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è/–Ω–∞–∑–∞–¥ –¥–ª—è –µ—Ç–∞–ø—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—É."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_cancel = types.InlineKeyboardButton(get_text('cancel_deposit', lang), callback_data='cancel_deposit_screenshot')
    btn_back = types.InlineKeyboardButton(get_text('back_to_methods', lang), callback_data='back_to_methods')
    markup.add(btn_cancel, btn_back)
    return markup

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    user = message.from_user
    user_id = user.id
    username = user.username
    logger.info(f"User {user_id} (@{username}) started the bot.")

    # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    add_user_if_not_exists(user_id, username)
    clear_user_state(user_id)
    # –ê–¥–º—ñ–Ω—Å—å–∫–∏–π —Å—Ç–∞–Ω –ù–ï —á–∏—Å—Ç–∏–º–æ —Ç—É—Ç, –±–æ –∞–¥–º—ñ–Ω –º–æ–∂–µ –±—É—Ç–∏ –≤ —ñ–Ω—à–æ–º—É —á–∞—Ç—ñ

    user_data = get_user_data(user_id)
    if not user_data:
        logger.error(f"Failed to get user data for {user_id} even after adding.")
        try:
            bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ /start —â–µ —Ä–∞–∑.")
        except Exception as e:
            logger.error(f"Failed to send error message to user {user_id}: {e}")
        return

    lang = user_data.get('language', 'uk')

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
    if not check_subscription(user_id):
        send_subscribe_prompt(message.chat.id, lang)
        return # –ù–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, –ø–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥–ø–∏—à–µ—Ç—å—Å—è
    # --- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---

    currency_code = user_data.get('currency', 'UAH')
    balance = user_data.get('balance', decimal.Decimal('0.00')) # Decimal
    currency_symbol = get_currency_symbol(currency_code)

    greeting_text = get_text('start_greeting', lang).format(
        balance=f"{balance:.2f}", # –§–æ—Ä–º–∞—Ç—É—î–º–æ Decimal –¥–ª—è –≤–∏–≤–æ–¥—É
        currency=currency_symbol,
        user_id=user_id
    )
    try:
        bot.send_message(
            message.chat.id,
            greeting_text,
            reply_markup=get_main_keyboard(lang)
        )
    except Exception as e:
        logger.error(f"Failed to send start message to user {user_id}: {e}")

@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∞–¥–º—ñ–Ω–∞."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    admin_lang = 'uk' # –ú–æ–≤–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–¥–º—ñ–Ω—É

    cancelled_user_state = False
    cancelled_admin_state = False

    # --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ) ---
    if chat_id == user_id:
        user_data = get_user_data(user_id) # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –º–æ–≤–∏
        lang = user_data.get('language', 'uk') if user_data else 'uk'

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è–º (—â–æ–± –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –º–µ–Ω—é, —è–∫—â–æ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π)
        if not check_subscription(user_id):
            send_subscribe_prompt(chat_id, lang)
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /cancel
            try:
                 bot.delete_message(chat_id, message.message_id)
            except Exception as e_del:
                 logger.warning(f"Could not delete /cancel message on failed subscription check: {e_del}")
            return

        current_state = get_user_state(user_id)
        if current_state and 'state' in current_state and current_state['state'].startswith('awaiting_'):
            state_name = current_state['state']
            clear_user_state(user_id)
            cancelled_user_state = True
            logger.info(f"User {user_id} cancelled state {state_name} via /cancel")
            try:
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                bot.send_message(chat_id, get_text('action_cancelled_user', lang), reply_markup=get_main_keyboard(lang))
            except Exception as e:
                logger.error(f"Failed to send user cancel message to user {user_id}: {e}")
            return # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ç—É—Ç, —è–∫—â–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    # --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Ç—É, –¥–µ –≤–≤–µ–¥–µ–Ω–æ /cancel) ---
    current_admin_state = get_admin_state(user_id) # user_id —Ç—É—Ç == admin_id
    if current_admin_state and 'state' in current_admin_state and current_admin_state['state'].startswith('awaiting_'):
        state_name = current_admin_state['state']
        prompt_message_id = current_admin_state.get('data', {}).get('prompt_message_id') # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç—É

        clear_admin_state(user_id)
        cancelled_admin_state = True
        logger.info(f"Admin {user_id} cancelled state {state_name} via /cancel in chat {chat_id}")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        try:
            sent_msg = bot.send_message(chat_id, get_text('cancel_action', admin_lang))
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /cancel –∞–¥–º—ñ–Ω–∞ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ
            try:
                bot.delete_message(chat_id, message.message_id)
                if prompt_message_id:
                    bot.delete_message(chat_id, prompt_message_id)
                    logger.info(f"Deleted prompt message {prompt_message_id} for admin {user_id} on cancel")
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                time.sleep(5)
                bot.delete_message(chat_id, sent_msg.message_id)
            except Exception as e_del:
                logger.warning(f"Could not delete messages on admin cancel: {e_del}")
        except Exception as e:
            logger.error(f"Failed to send admin cancel confirmation to admin {user_id} in chat {chat_id}: {e}")
        return # –ó–∞–≤–µ—Ä—à—É—î–º–æ, —è–∫—â–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞

    # --- –Ø–∫—â–æ –∂–æ–¥–µ–Ω —Å—Ç–∞–Ω –Ω–µ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ ---
    if not cancelled_user_state and not cancelled_admin_state:
        if chat_id == user_id: # –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = get_user_data(user_id) # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –º–æ–≤–∏
            lang = user_data.get('language', 'uk') if user_data else 'uk'
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
            if not check_subscription(user_id):
                send_subscribe_prompt(chat_id, lang)
                # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /cancel
                try:
                    bot.delete_message(chat_id, message.message_id)
                except Exception as e_del:
                    logger.warning(f"Could not delete /cancel message on failed subscription check (no state): {e_del}")
                return

            logger.info(f"User {user_id} used /cancel, but no active state found. Sending main menu.")
            try:
                bot.send_message(chat_id, get_text('main_menu', lang), reply_markup=get_main_keyboard(lang))
            except Exception as e:
                logger.error(f"Failed to send main menu message on inactive cancel to user {user_id}: {e}")
        else: # –ê–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç, –∞–ª–µ –∞–¥–º—ñ–Ω –Ω–µ –±—É–≤ —É —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
            logger.info(f"Admin {user_id} used /cancel in chat {chat_id} but wasn't in an awaiting state.")
            try:
                sent_msg = bot.send_message(chat_id, get_text('no_active_action', admin_lang))
                # –í–∏–¥–∞–ª—è—î–º–æ /cancel –∞–¥–º—ñ–Ω–∞ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                try:
                    bot.delete_message(chat_id, message.message_id)
                    time.sleep(5)
                    bot.delete_message(chat_id, sent_msg.message_id)
                except Exception as e_del:
                    logger.warning(f"Failed to delete admin's inactive /cancel message: {e_del}")
            except Exception as e:
                logger.error(f"Failed to send 'no active action' message to admin {user_id} in chat {chat_id}: {e}")


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

def show_profile(message, lang, user_data):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ—Ñ—ñ–ª—é."""
    user_id = message.from_user.id
    currency_code = user_data.get('currency', 'UAH')
    balance = user_data.get('balance', decimal.Decimal('0.00')) # Decimal
    currency_symbol = get_currency_symbol(currency_code)
    profile_text = get_text('profile_info', lang).format(
        user_id=user_id,
        balance=f"{balance:.2f}", # –§–æ—Ä–º–∞—Ç—É—î–º–æ Decimal
        currency=currency_symbol
    )
    try:
        bot.send_message(message.chat.id, profile_text)
    except Exception as e:
        logger.error(f"Failed to send profile info to user {user_id}: {e}")

def show_about(message, lang):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é "–ü—Ä–æ –Ω–∞—Å"."""
    if lang == 'ru': about_text_key = 'ABOUT_TEXT_RU'
    elif lang == 'en': about_text_key = 'ABOUT_TEXT_EN'
    else: about_text_key = 'ABOUT_TEXT_UK' # Default to uk

    about_text = get_text(about_text_key, lang)
    try:
        bot.send_message(message.chat.id, about_text)
    except Exception as e:
        logger.error(f"Failed to send about info to user {message.from_user.id}: {e}")

def show_settings(message, lang):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏."""
    try:
        bot.send_message(
            message.chat.id,
            get_text('settings_menu', lang),
            reply_markup=get_settings_keyboard(lang)
        )
    except Exception as e:
        logger.error(f"Failed to send settings menu to user {message.from_user.id}: {e}")

def request_support_message(message, lang):
    """–ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."""
    user_id = message.from_user.id
    set_user_state(user_id, 'awaiting_support_message')
    try:
        bot.send_message(
            message.chat.id,
            get_text('support_request', lang),
            reply_markup=types.ForceReply(selective=True)
        )
    except Exception as e:
        logger.error(f"Failed to request support message from user {user_id}: {e}")
        clear_user_state(user_id)
        try:
            bot.send_message(user_id, get_text('error_sending_support', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e2:
            logger.error(f"Also failed to send error message to user {user_id}: {e2}")

def show_buy_options(message, lang):
    """–ü–æ–∫–∞–∑—É—î –æ–ø—Ü—ñ—ó –∫—É–ø—ñ–≤–ª—ñ –Ω–æ–º–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
    try:
        bot.send_message(
            message.chat.id,
            get_text('choose_country', lang),
            reply_markup=get_country_keyboard(lang)
        )
    except Exception as e:
        logger.error(f"Failed to send buy options to user {message.from_user.id}: {e}")

def request_deposit_amount(message, lang):
    """–ó–∞–ø–∏—Ç—É—î —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–∑–∞–≤–∂–¥–∏ –≤ UAH)."""
    user_id = message.from_user.id
    clear_user_state(user_id)
    set_user_state(user_id, 'awaiting_deposit_amount')
    try:
        bot.send_message(
            message.chat.id,
            get_text('request_deposit_amount', lang), # –¢–µ–∫—Å—Ç –≤–∂–µ –≤–∫–∞–∑—É—î UAH
            reply_markup=types.ForceReply(selective=True)
        )
    except Exception as e:
        logger.error(f"Failed to request deposit amount from user {user_id}: {e}")
        clear_user_state(user_id)
        try:
            bot.send_message(user_id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e2:
            logger.error(f"Also failed to send error message to user {user_id}: {e2}")


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫—Ä–æ–∫—ñ–≤ (—Å—Ç–∞–Ω—ñ–≤) ---

def process_deposit_amount_step(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–≤ UAH)."""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    state_info = get_user_state(user_id)

    if not user_data or not state_info or state_info.get('state') != 'awaiting_deposit_amount':
        logger.warning(f"User {user_id} sent amount but not in awaiting_deposit_amount state ({state_info})")
        lang = user_data.get('language', 'uk') if user_data else 'uk'
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –ø–æ–º–∏–ª–∫–∏
        if not check_subscription(user_id):
             send_subscribe_prompt(message.chat.id, lang)
             return
        try:
            bot.send_message(message.chat.id, get_text('invalid_step', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e:
            logger.error(f"Failed to send invalid step message to user {user_id}: {e}")
        clear_user_state(user_id)
        return

    lang = user_data.get('language', 'uk')
    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
    if not check_subscription(user_id):
        send_subscribe_prompt(message.chat.id, lang)
        # –ù–µ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–∞ –±—É–ª–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
        # clear_user_state(user_id)
        return
    # --- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---

    # –í–∞–ª—é—Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ó–ê–í–ñ–î–ò UAH
    deposit_currency_code = 'UAH'
    deposit_currency_symbol = get_currency_symbol(deposit_currency_code)

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Decimal –¥–ª—è —Å—É–º–∏
        deposit_amount = decimal.Decimal(message.text.replace(',', '.'))
        if deposit_amount <= 0:
            raise ValueError("Amount must be positive")

        # –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ 2 –∑–Ω–∞–∫—ñ–≤
        deposit_amount = deposit_amount.quantize(decimal.Decimal('0.01'), rounding=decimal.ROUND_HALF_UP)

        set_user_state(user_id, 'awaiting_payment_method', {'amount': deposit_amount, 'currency': deposit_currency_code})
        bot.send_message(
            message.chat.id,
            get_text('select_payment_method', lang).format(amount=f"{deposit_amount:.2f}", currency=deposit_currency_symbol),
            reply_markup=get_payment_method_keyboard(lang)
        )

    except (ValueError, decimal.InvalidOperation):
        logger.warning(f"Invalid deposit amount entered by user {user_id}: {message.text}")
        error_message = get_text('invalid_deposit_amount', lang)
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É, –Ω–µ –æ—á–∏—â—É—é—á–∏ —Å—Ç–∞–Ω
            bot.send_message(message.chat.id, error_message, reply_markup=types.ForceReply(selective=True))
        except Exception as e:
            logger.error(f"Failed to send invalid amount message or reregister step for user {user_id}: {e}")
            clear_user_state(user_id) # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –Ω–∞–≤—ñ—Ç—å –∑–∞–ø–∏—Ç–∞—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—å
            try:
                bot.send_message(user_id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
            except Exception as e2:
                logger.error(f"Also failed to send error message to user {user_id}: {e2}")
    except Exception as e:
        logger.error(f"Error processing deposit amount for user {user_id}: {e}")
        clear_user_state(user_id)
        try:
            bot.send_message(user_id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e2:
            logger.error(f"Also failed to send error message to user {user_id}: {e2}")

def process_support_message_step(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."""
    user = message.from_user
    user_id = user.id
    support_message_text = message.text
    user_data = get_user_data(user_id)
    lang = user_data.get('language', 'uk') if user_data else 'uk'

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
    if not check_subscription(user_id):
        send_subscribe_prompt(message.chat.id, lang)
        # –ù–µ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–∞ –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        # clear_user_state(user_id)
        return
    # --- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---

    original_username = user_data.get('username', "None") if user_data else "None"

    # –ö–æ–º–∞–Ω–¥–∞ /cancel –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

    logger.info(f"User {user_id} (@{original_username}) sent support message: {support_message_text}")

    text_to_admin = get_text('support_message_to_admin', 'uk').format( # –ó–∞–≤–∂–¥–∏ –∞–¥–º—ñ–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        user_id=user_id,
        username=original_username,
        message_text=support_message_text
    )
    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        sent_message = bot.send_message(
            SUPPORT_CHAT_ID,
            text_to_admin,
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"
            reply_markup=get_support_reply_keyboard('uk', target_user_id=user_id, support_msg_id='{msg_id}') # {msg_id} –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∏–∂—á–µ
        )
        logger.info(f"Support message forwarded to chat {SUPPORT_CHAT_ID} with message_id {sent_message.message_id}")

        # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        new_markup = get_support_reply_keyboard('uk', target_user_id=user_id, support_msg_id=sent_message.message_id)
        if new_markup:
            bot.edit_message_reply_markup(
                chat_id=SUPPORT_CHAT_ID,
                message_id=sent_message.message_id,
                reply_markup=new_markup
            )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ username –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∞–±–æ reply
        support_message_map[sent_message.message_id] = {'user_id': user_id, 'username': original_username}
        logger.info(f"Saved support map: {sent_message.message_id} -> user {user_id} (@{original_username})")

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        bot.send_message(
            message.chat.id,
            get_text('support_sent', lang),
            reply_markup=get_main_keyboard(lang)
        )
        clear_user_state(user_id)

    except Exception as e:
        logger.error(f"Failed to send support message to {SUPPORT_CHAT_ID} or notify user {user_id}: {e}")
        try:
            bot.send_message(
                message.chat.id,
                get_text('error_sending_support', lang),
                reply_markup=get_main_keyboard(lang)
            )
        except Exception as e2:
            logger.error(f"Also failed to send error to user {user_id}: {e2}")
        # –°—Ç–∞–Ω –ù–ï –æ—á–∏—â—É—î–º–æ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏


# --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---

@bot.message_handler(func=lambda message: message.chat.type == 'private' and not message.text.startswith('/'), content_types=['text'])
def handle_text_message(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ, —è–∫—ñ –Ω–µ —î –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    user_id = message.from_user.id
    text = message.text
    user_data = get_user_data(user_id)

    if not user_data:
        logger.warning(f"User {user_id} not found in DB, requesting /start")
        try:
            # –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –ø—ñ–¥–ø–∏—Å–∫—É (–º–æ–∂–ª–∏–≤–æ, —Ü–µ –ø–µ—Ä—à–∞ –≤–∑–∞—î–º–æ–¥—ñ—è)
            # —ñ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –ø–æ–º–∏–ª–∫—É
            if not check_subscription(user_id):
                send_subscribe_prompt(message.chat.id, 'uk') # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–≤—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            else:
                 bot.send_message(message.chat.id, get_text('start_needed', 'uk'))
        except Exception as e:
            logger.error(f"Failed to send start_needed/subscribe message to user {user_id}: {e}")
        return

    lang = user_data.get('language', 'uk')

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
    if not check_subscription(user_id):
        send_subscribe_prompt(message.chat.id, lang)
        return
    # --- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---

    current_state_info = get_user_state(user_id)
    current_state = current_state_info.get('state') if current_state_info else None

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if current_state == 'awaiting_deposit_amount':
        process_deposit_amount_step(message)
        return
    elif current_state == 'awaiting_support_message':
        process_support_message_step(message)
        return

    # 2. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ —è–∫–æ–º—É—Å—å —Å—Ç–∞–Ω—ñ)
    if current_state is None:
        try:
            if text == get_text('profile', lang): show_profile(message, lang, user_data)
            elif text == get_text('about', lang): show_about(message, lang)
            elif text == get_text('settings', lang): show_settings(message, lang)
            elif text == get_text('support', lang): request_support_message(message, lang)
            elif text == get_text('buy_number', lang): show_buy_options(message, lang)
            elif text == get_text('deposit', lang): request_deposit_amount(message, lang)
            else:
                logger.info(f"Unknown text command from {user_id} (no state): {text}")
                bot.send_message(message.chat.id, get_text('unknown_command', lang), reply_markup=get_main_keyboard(lang)) # –î–æ–¥–∞–Ω–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        except Exception as e:
            logger.error(f"Error processing text command '{text}' for user {user_id}: {e}")
            try:
                bot.send_message(message.chat.id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
            except Exception as e2:
                logger.error(f"Also failed to send error message to user {user_id}: {e2}")
    # 3. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —ñ–Ω—à–æ–º—É —Å—Ç–∞–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, awaiting_screenshot) —ñ –Ω–∞–¥—Å–∏–ª–∞—î —Ç–µ–∫—Å—Ç
    else:
        logger.warning(f"User {user_id} sent text '{text}' while in unexpected state {current_state}.")
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –∫—Ä–æ–∫
            bot.send_message(message.chat.id, get_text('invalid_step', lang))
            # –Ø–∫—â–æ –æ—á—ñ–∫—É–≤–∞–ª–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç, –Ω–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ —Ü–µ
            if current_state == 'awaiting_screenshot':
                bot.send_message(message.chat.id, get_text('awaiting_screenshot_message', lang),
                                 reply_markup=get_cancel_deposit_keyboard(lang))
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–∞–Ω—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        except Exception as e:
            logger.error(f"Failed to send invalid_step/reminder message to user {user_id} in state {current_state}: {e}")


# --- –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ (–¥–ª—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É) ---

@bot.message_handler(content_types=['photo'], func=lambda message: message.chat.type == 'private')
def handle_screenshot(message):
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó (–æ—á—ñ–∫—É—î—Ç—å—Å—è —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏)."""
    user_id = message.from_user.id
    logger.info(f"Entered handle_screenshot for user {user_id}")

    user_data = get_user_data(user_id)
    lang = user_data.get('language', 'uk') if user_data else 'uk'

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
    if not check_subscription(user_id):
        send_subscribe_prompt(message.chat.id, lang)
        return
    # --- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---

    current_state_info = get_user_state(user_id)
    current_state = current_state_info.get('state') if current_state_info else None


    if not user_data or not current_state_info or current_state != 'awaiting_screenshot':
        logger.warning(f"User {user_id} sent a photo but not in 'awaiting_screenshot' state. Current state info: {current_state_info}")
        try:
            bot.send_message(message.chat.id, get_text('invalid_step', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e:
            logger.error(f"Failed to send invalid step message on photo to user {user_id}: {e}")
        return

    logger.info(f"User {user_id} is in correct state 'awaiting_screenshot'. Processing photo.")
    deposit_info = current_state_info.get('data', {})
    amount = deposit_info.get('amount') # Decimal
    method_code = deposit_info.get('method')
    # –í–∞–ª—é—Ç–∞ –∑–∞—è–≤–∫–∏ –∑–∞–≤–∂–¥–∏ UAH
    currency_code = deposit_info.get('currency', 'UAH') # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º UAH
    username = user_data.get('username', 'N/A')

    if amount is None or not method_code or not currency_code:
        logger.error(f"Missing data in state 'awaiting_screenshot' for user {user_id}. Data: {deposit_info}")
        try:
            bot.send_message(user_id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e:
            logger.error(f"Failed to send error message to user {user_id} due to missing state data: {e}")
        clear_user_state(user_id)
        return

    currency_symbol = get_currency_symbol(currency_code)

    try:
        photo_id = message.photo[-1].file_id
        logger.info(f"Received screenshot from user {user_id} (photo_id: {photo_id}) for {amount} {currency_code} via {method_code}")

        admin_text = get_text('admin_confirmation_message', 'uk').format( # –ó–∞–≤–∂–¥–∏ —É–∫—Ä –¥–ª—è –∞–¥–º—ñ–Ω–∞
            user_id=user_id,
            username=username,
            amount=f"{amount:.2f}", # –§–æ—Ä–º–∞—Ç—É—î–º–æ Decimal
            currency=currency_symbol,
            method=get_text(f'payment_method_{method_code}', 'uk')
        )

        logger.info(f"Attempting to send photo to confirmation chat {CONFIRMATION_CHAT_ID}")
        # 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ
        sent_photo_msg = bot.send_photo(CONFIRMATION_CHAT_ID, photo_id)
        logger.info(f"Photo sent to confirmation chat. Photo Message ID: {sent_photo_msg.message_id}")

        # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–æ—Ç–æ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ reply_parameters)
        reply_params = ReplyParameters(message_id=sent_photo_msg.message_id)
        sent_admin_msg = bot.send_message(
            CONFIRMATION_CHAT_ID,
            admin_text,
            reply_parameters=reply_params
        )
        text_msg_id = sent_admin_msg.message_id
        logger.info(f"Confirmation text sent. Text Message ID: {text_msg_id}")

        # 3. –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        admin_keyboard = get_admin_confirmation_keyboard('uk', text_msg_id)

        if admin_keyboard:
            # 4. –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–æ–¥–∞—é—á–∏ –∫–Ω–æ–ø–∫–∏
            bot.edit_message_reply_markup(
                chat_id=CONFIRMATION_CHAT_ID,
                message_id=text_msg_id,
                reply_markup=admin_keyboard
            )
            logger.info(f"Added confirmation buttons to text message {text_msg_id}")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–ø–∏—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ ID —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            confirmation_message_map[text_msg_id] = {
                'user_id': user_id,
                'username': username, # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
                'requested_amount': amount, # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–ª–µ–Ω—É —Å—É–º—É (Decimal)
                'method': method_code,
                'currency': currency_code, # –í–∞–ª—é—Ç–∞ –∑–∞—è–≤–∫–∏ (–∑–∞–≤–∂–¥–∏ UAH)
                'photo_msg_id': sent_photo_msg.message_id,
                'user_lang': lang # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            }
            logger.info(f"Saved confirmation map: TEXT msg_id {text_msg_id} -> user {user_id} (requested: {amount} {currency_code})")
        else:
            logger.error("Failed to create admin confirmation keyboard.")
            reply_params_error = ReplyParameters(message_id=sent_photo_msg.message_id)
            bot.send_message(CONFIRMATION_CHAT_ID, "–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_parameters=reply_params_error)

        # 5. –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        logger.info(f"Notifying user {user_id} about screenshot received.")
        bot.send_message(
            user_id,
            get_text('screenshot_received_admin_notification', lang),
            reply_markup=get_main_keyboard(lang)
        )
        logger.info(f"User {user_id} notified.")

        # 6. –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        clear_user_state(user_id)

    except Exception as e:
        logger.error(f"Failed processing screenshot for user {user_id}. Error: {e}")
        logger.exception("Traceback for handle_screenshot error:")
        clear_user_state(user_id)
        try:
            bot.send_message(user_id, get_text('error_sending_support', lang), reply_markup=get_main_keyboard(lang))
        except Exception as e2:
            logger.error(f"Also failed to send error message to user {user_id}: {e2}")

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

def process_rejection_reason(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∞–¥–º—ñ–Ω–æ–º."""
    admin_id = message.from_user.id
    reason_text = message.text.strip()
    admin_state_info = get_admin_state(admin_id)
    admin_lang = 'uk' # –ú–æ–≤–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–¥–º—ñ–Ω—É

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
    if not admin_state_info or admin_state_info.get('state') != 'awaiting_rejection_reason':
        logger.warning(f"Admin {admin_id} sent text '{reason_text}' but not in 'awaiting_rejection_reason' state.")
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –ø—Ä–æ –∑–∞–ø–∏—Ç –ø—Ä–∏—á–∏–Ω–∏
        if message.reply_to_message and message.reply_to_message.from_user.is_bot:
            try:
                reply_params = ReplyParameters(message_id=message.message_id)
                bot.send_message(message.chat.id, get_text('admin_not_awaiting_reason', admin_lang), reply_parameters=reply_params)
            except Exception as e:
                logger.error(f"Failed to send state error to admin {admin_id}: {e}")
        return

    # 2. –û–±—Ä–æ–±–∫–∞ /cancel - –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

    # 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑—ñ —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
    state_data = admin_state_info.get('data', {})
    prompt_message_id = state_data.get('prompt_message_id') # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç—É
    target_user_id = state_data.get('user_id')
    # –°—É–º–∞ —ñ –≤–∞–ª—é—Ç–∞ —Ç—É—Ç - —Ü–µ *–∑–∞—è–≤–ª–µ–Ω—ñ* –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (–∑ confirmation_message_map)
    requested_amount = state_data.get('requested_amount') # Decimal
    currency_code = state_data.get('currency') # UAH
    clicked_text_msg_id = state_data.get('clicked_text_msg_id')
    original_admin_message_text = state_data.get('original_caption')
    photo_msg_id = state_data.get('photo_msg_id')
    method_code = state_data.get('method')

    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    if not all([target_user_id, requested_amount is not None, currency_code, clicked_text_msg_id, original_admin_message_text, photo_msg_id]):
        logger.error(f"Incomplete data found in admin state 'awaiting_rejection_reason' for admin {admin_id}. Data: {state_data}")
        try:
            reply_params = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
            bot.send_message(CONFIRMATION_CHAT_ID,
                             "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è. –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
                             reply_parameters=reply_params)
        except Exception as e:
            logger.error(f"Failed to send data error message to admin chat: {e}")
        clear_admin_state(admin_id)
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
        try:
            if prompt_message_id: bot.delete_message(message.chat.id, prompt_message_id)
            bot.delete_message(message.chat.id, message.message_id)
        except: pass
        return

    # 5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å–∏–º–≤–æ–ª—É –≤–∞–ª—é—Ç–∏ –∑–∞—è–≤–∫–∏ (UAH)
    currency_symbol = get_currency_symbol(currency_code) # –°–∏–º–≤–æ–ª UAH
    target_user_data = get_user_data(target_user_id)
    user_lang = target_user_data.get('language', 'uk') if target_user_data else 'uk'

    try:
        # 6. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –Ω–∞–¥–∞–Ω–æ –ø—Ä–∏—á–∏–Ω—É
        reject_with_reason = reason_text != REJECT_WITHOUT_REASON_SYMBOL and bool(reason_text)

        if reject_with_reason:
            # --- –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ó –ø—Ä–∏—á–∏–Ω–æ—é ---
            logger.info(f"Admin {admin_id} rejected deposit for {target_user_id} with reason: {reason_text}")
            user_notification_key = 'deposit_rejected_with_comment_user'
            admin_confirm_key = 'admin_action_confirmed_reject_comment'
            user_notification_text = get_text(user_notification_key, user_lang).format(
                # –°—É–º–∞ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É - –∑–∞—è–≤–ª–µ–Ω–∞ —Å—É–º–∞
                amount=f"{requested_amount:.2f}", # –§–æ—Ä–º–∞—Ç—É—î–º–æ Decimal
                currency=currency_symbol, # UAH
                reason=reason_text
            )
            admin_confirm_text = get_text(admin_confirm_key, admin_lang).format(user_id=target_user_id)
            final_admin_text = f"{original_admin_message_text}\n\n---\n{admin_confirm_text}\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}"
        else:
            # --- –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ë–ï–ó –ø—Ä–∏—á–∏–Ω–∏ ---
            logger.info(f"Admin {admin_id} rejected deposit for {target_user_id} without explicit reason.")
            user_notification_key = 'deposit_rejected_user'
            admin_confirm_key = 'admin_action_confirmed_reject'
            user_notification_text = get_text(user_notification_key, user_lang).format(
                # –°—É–º–∞ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É - –∑–∞—è–≤–ª–µ–Ω–∞ —Å—É–º–∞
                amount=f"{requested_amount:.2f}", # –§–æ—Ä–º–∞—Ç—É—î–º–æ Decimal
                currency=currency_symbol # UAH
            )
            admin_confirm_text = get_text(admin_confirm_key, admin_lang).format(user_id=target_user_id)
            final_admin_text = f"{original_admin_message_text}\n\n---\n{admin_confirm_text}"

        # 7. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            bot.send_message(
                target_user_id,
                user_notification_text,
                reply_markup=get_main_keyboard(user_lang)
            )
            logger.info(f"Rejection notification sent to user {target_user_id}")
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"Failed to send rejection notification to user {target_user_id}: {e}")
            final_admin_text += f"\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e.error_code}"
        except Exception as e:
            logger.error(f"Unexpected error sending rejection notification to user {target_user_id}: {e}")
            final_admin_text += f"\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞)."

        # 8. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å
        bot.edit_message_text(
            final_admin_text,
            chat_id=CONFIRMATION_CHAT_ID,
            message_id=clicked_text_msg_id,
            reply_markup=None # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏
        )
        logger.info(f"Admin confirmation message {clicked_text_msg_id} updated for rejection.")

        # 9. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –∫–∞—Ä—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å
        if clicked_text_msg_id in confirmation_message_map:
            del confirmation_message_map[clicked_text_msg_id]
            logger.info(f"Removed confirmation data for message {clicked_text_msg_id}")

    except Exception as e:
        logger.error(f"Error processing rejection reason from admin {admin_id}: {e}")
        try:
            reply_params = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
            bot.send_message(
                CONFIRMATION_CHAT_ID,
                f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {str(e)}",
                reply_parameters=reply_params
            )
        except Exception as e2:
            logger.error(f"Also failed to send error message to admin chat: {e2}")
    finally:
        # 10. –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
        clear_admin_state(admin_id)

        # 11. –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç—É –ø—Ä–∏—á–∏–Ω–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–∞
        try:
            if prompt_message_id: # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç, ID —è–∫–æ–≥–æ –∑–±–µ—Ä–µ–≥–ª–∏
                bot.delete_message(message.chat.id, prompt_message_id)
            bot.delete_message(message.chat.id, message.message_id) # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
            logger.info(f"Deleted reason prompt and admin reply message in chat {message.chat.id}")
        except Exception as e:
            logger.warning(f"Could not delete reason messages in chat {message.chat.id}: {e}")

def process_approve_amount(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –∞–¥–º—ñ–Ω–æ–º —Å—É–º—É –¥–ª—è –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è (–≤ UAH)."""
    admin_id = message.from_user.id
    amount_text = message.text.strip()
    admin_state_info = get_admin_state(admin_id)
    admin_lang = 'uk'

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
    if not admin_state_info or admin_state_info.get('state') != 'awaiting_approve_amount':
        logger.warning(f"Admin {admin_id} sent text '{amount_text}' but not in 'awaiting_approve_amount' state.")
        if message.reply_to_message and message.reply_to_message.from_user.is_bot:
            try:
                reply_params = ReplyParameters(message_id=message.message_id)
                bot.send_message(message.chat.id, get_text('admin_not_awaiting_approve_amount', admin_lang), reply_parameters=reply_params)
            except Exception as e:
                logger.error(f"Failed to send state error to admin {admin_id}: {e}")
        return

    # 2. –û–±—Ä–æ–±–∫–∞ /cancel - –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

    # 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑—ñ —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
    state_data = admin_state_info.get('data', {})
    prompt_message_id = state_data.get('prompt_message_id')
    target_user_id = state_data.get('user_id')
    # –ó–∞—è–≤–ª–µ–Ω–∞ —Å—É–º–∞ —ñ –≤–∞–ª—é—Ç–∞ (UAH)
    requested_amount = state_data.get('requested_amount') # Decimal
    currency_code = state_data.get('currency') # UAH (–≤–∞–ª—é—Ç–∞ –∑–∞—è–≤–∫–∏ —ñ —Å—É–º–∏, —è–∫—É –≤–≤–æ–¥–∏—Ç—å –∞–¥–º—ñ–Ω)
    clicked_text_msg_id = state_data.get('clicked_text_msg_id')
    original_admin_message_text = state_data.get('original_caption')
    photo_msg_id = state_data.get('photo_msg_id')
    method_code = state_data.get('method')

    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    if not all([target_user_id, requested_amount is not None, currency_code, clicked_text_msg_id, original_admin_message_text, photo_msg_id]):
        logger.error(f"Incomplete data found in admin state 'awaiting_approve_amount' for admin {admin_id}. Data: {state_data}")
        try:
            reply_params = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
            bot.send_message(CONFIRMATION_CHAT_ID,
                             "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è. –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
                             reply_parameters=reply_params)
        except Exception as e:
            logger.error(f"Failed to send data error message to admin chat: {e}")
        clear_admin_state(admin_id)
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
        try:
            if prompt_message_id: bot.delete_message(message.chat.id, prompt_message_id)
            bot.delete_message(message.chat.id, message.message_id)
        except: pass
        return

    # 5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–≤–∞, –ø–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞)
    target_user_data = get_user_data(target_user_id)
    if not target_user_data:
        logger.error(f"Cannot find target user {target_user_id} data for approval.")
        try:
            reply_params = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
            bot.send_message(CONFIRMATION_CHAT_ID,
                             f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}.",
                             reply_parameters=reply_params)
        except Exception as e:
            logger.error(f"Failed to send user not found error message to admin chat: {e}")
        clear_admin_state(admin_id)
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
        try:
            if prompt_message_id: bot.delete_message(message.chat.id, prompt_message_id)
            bot.delete_message(message.chat.id, message.message_id)
        except: pass
        return

    user_lang = target_user_data.get('language', 'uk')
    user_currency_code = target_user_data.get('currency', 'UAH') # –ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_currency_symbol = get_currency_symbol(user_currency_code)

    try:
        # 6. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏ (—è–∫–∞ –º–∞—î –±—É—Ç–∏ –≤ UAH)
        credited_amount_uah = decimal.Decimal(amount_text.replace(',', '.'))
        if credited_amount_uah <= 0:
            raise ValueError("Amount must be positive")

        # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 2 –∑–Ω–∞–∫—ñ–≤
        credited_amount_uah = credited_amount_uah.quantize(decimal.Decimal('0.01'), rounding=decimal.ROUND_HALF_UP)

        # 7. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        # –§—É–Ω–∫—Ü—ñ—è update_user_balance —Å–∞–º–∞ –≤–∏–∫–æ–Ω–∞—î –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é credited_amount_uah (–≤ UAH) –¥–æ user_currency_code
        if update_user_balance(target_user_id, credited_amount_uah, 'UAH'):
            # --- –£—Å–ø—ñ—à–Ω–µ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è ---
            logger.info(f"Admin {admin_id} approved deposit for {target_user_id}. Credited {credited_amount_uah} UAH (will be converted if needed).")

            # –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å —ñ –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            updated_user_data = get_user_data(target_user_id)
            # –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏, *—Å–∫—ñ–ª—å–∫–∏ —Å–∞–º–µ* –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –£ –í–ê–õ–Æ–¢–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–ê, —Ç—Ä–µ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ credited_amount_uah
            amount_credited_in_user_currency = convert_currency(credited_amount_uah, 'UAH', user_currency_code)
            if amount_credited_in_user_currency is None:
                # –Ø–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è –≤–∂–µ –ü–Ü–°–õ–Ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É (–¥—É–∂–µ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ),
                # –ø–æ–∫–∞–∑—É—î–º–æ —Ö–æ—á–∞ –± —Å—É–º—É –≤ UAH
                logger.error(f"Could not convert credited amount {credited_amount_uah} UAH to {user_currency_code} for notifications, though balance update succeeded.")
                amount_credited_in_user_currency = credited_amount_uah # Fallback to UAH amount
                notify_currency_symbol = get_currency_symbol('UAH')
                notify_currency_code = 'UAH'
            else:
                notify_currency_symbol = user_currency_symbol
                notify_currency_code = user_currency_code


            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–æ–∫–∞–∑—É—î–º–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—É —Å—É–º—É —É –í–ê–õ–Æ–¢–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–ê)
            user_notification_text = get_text('deposit_approved_user', user_lang).format(
                amount=f"{amount_credited_in_user_currency:.2f}",
                currency=notify_currency_symbol
            )
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
            admin_confirm_text = get_text('admin_action_confirmed_approve', admin_lang).format(
                user_id=target_user_id,
                credited_amount=f"{amount_credited_in_user_currency:.2f}", # –£ –≤–∞–ª—é—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ UAH —è–∫ fallback)
                currency=notify_currency_symbol # –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ UAH)
            )
            # –Ø–∫—â–æ –≤–∞–ª—é—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ UAH —ñ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–¥–∞–ª–∞—Å—è, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Å—É–º—É –≤ UAH
            if currency_code != user_currency_code and notify_currency_code == user_currency_code:
                admin_confirm_text += f" (–∑ {credited_amount_uah:.2f} {get_currency_symbol('UAH')})" # –í –¥—É–∂–∫–∞—Ö —Å—É–º–∞, —è–∫—É –≤–≤—ñ–≤ –∞–¥–º—ñ–Ω (–≤ UAH)

            final_admin_text = f"{original_admin_message_text}\n\n---\n{admin_confirm_text}"

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            try:
                bot.send_message(target_user_id, user_notification_text, reply_markup=get_main_keyboard(user_lang))
                logger.info(f"Approval notification sent to user {target_user_id}")
            except telebot.apihelper.ApiTelegramException as e:
                logger.error(f"Failed to send approval notification to user {target_user_id}: {e}")
                final_admin_text += f"\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e.error_code}"
            except Exception as e:
                logger.error(f"Unexpected error sending approval notification to user {target_user_id}: {e}")
                final_admin_text += f"\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞)."

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å
            bot.edit_message_text(
                final_admin_text,
                chat_id=CONFIRMATION_CHAT_ID,
                message_id=clicked_text_msg_id,
                reply_markup=None # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏
            )
            logger.info(f"Admin confirmation message {clicked_text_msg_id} updated for approval.")

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –∫–∞—Ä—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å
            if clicked_text_msg_id in confirmation_message_map:
                del confirmation_message_map[clicked_text_msg_id]
                logger.info(f"Removed confirmation data for message {clicked_text_msg_id}")

            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
            clear_admin_state(admin_id)

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç—É —Å—É–º–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–∞
            try:
                if prompt_message_id:
                    bot.delete_message(message.chat.id, prompt_message_id)
                bot.delete_message(message.chat.id, message.message_id)
                logger.info(f"Deleted amount prompt and admin reply message in chat {message.chat.id}")
            except Exception as e:
                logger.warning(f"Could not delete amount messages in chat {message.chat.id}: {e}")

        else:
            # --- –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ---
            # –ü—Ä–∏—á–∏–Ω–∞ –ø–æ–º–∏–ª–∫–∏ (–π–º–æ–≤—ñ—Ä–Ω–æ, –ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó) –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞ –≤ update_user_balance/convert_currency
            logger.error(f"Failed to update balance for user {target_user_id} during approval process by admin {admin_id}.")
            try:
                reply_params = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
                admin_error_text = get_text('balance_update_failed_admin', admin_lang).format(user_id=target_user_id)
                # –°–ø—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞
                if currency_code != user_currency_code:
                    admin_error_text += f" ({get_text('currency_conversion_error', admin_lang).format(from_curr=currency_code, to_curr=user_currency_code)})"

                bot.send_message(CONFIRMATION_CHAT_ID,
                                 admin_error_text,
                                 reply_parameters=reply_params)
            except Exception as e_msg:
                logger.error(f"Failed to send balance update error message to admin chat: {e_msg}")

            # –ù–µ —á–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞, —â–æ–± –≤—ñ–Ω –º—ñ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /cancel –∞–±–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É
            try:
                error_msg_reply = get_text('invalid_approve_amount', admin_lang) + f"\n({get_text('balance_update_failed_admin', admin_lang).format(user_id=target_user_id)})"
                if currency_code != user_currency_code:
                    error_msg_reply += f"\n({get_text('currency_conversion_error', admin_lang).format(from_curr=currency_code, to_curr=user_currency_code)})"
                reply_params_force = ReplyParameters(message_id=message.message_id) # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
                prompt_msg = bot.send_message(message.chat.id, error_msg_reply, reply_markup=types.ForceReply(selective=True), reply_parameters=reply_params_force)
                admin_states[admin_id]['data']['prompt_message_id'] = prompt_msg.message_id # –û–Ω–æ–≤–ª—é—î–º–æ ID –∑–∞–ø–∏—Ç—É
            except Exception as e_prompt:
                logger.error(f"Failed to re-prompt admin for amount after balance update error: {e_prompt}")
                clear_admin_state(admin_id) # –Ø–∫—â–æ –Ω–∞–≤—ñ—Ç—å –∑–∞–ø–∏—Ç–∞—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è, —á–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω


    except (ValueError, decimal.InvalidOperation):
        # --- –ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –∞–¥–º—ñ–Ω–æ–º ---
        logger.warning(f"Invalid approve amount entered by admin {admin_id}: {amount_text}")
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ ID –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
            error_msg = get_text('invalid_approve_amount', admin_lang)
            reply_params_force = ReplyParameters(message_id=message.message_id) # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –Ω–µ–≤—ñ—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
            prompt_msg = bot.send_message(message.chat.id, error_msg, reply_markup=types.ForceReply(selective=True), reply_parameters=reply_params_force)
            admin_states[admin_id]['data']['prompt_message_id'] = prompt_msg.message_id # –û–Ω–æ–≤–ª—é—î–º–æ ID –∑–∞–ø–∏—Ç—É
        except Exception as e:
            logger.error(f"Failed to resend invalid amount message to admin {admin_id}: {e}")
            clear_admin_state(admin_id) # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –Ω–∞–≤—ñ—Ç—å –∑–∞–ø–∏—Ç–∞—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è
            try:
                reply_p = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
                bot.send_message(CONFIRMATION_CHAT_ID, get_text('callback_error', admin_lang), reply_parameters=reply_p)
            except: pass
    except Exception as e:
        # --- –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ ---
        logger.error(f"Error processing approve amount from admin {admin_id}: {e}")
        logger.exception("Traceback:")
        try:
            reply_params = ReplyParameters(message_id=clicked_text_msg_id) if clicked_text_msg_id else None
            bot.send_message(
                CONFIRMATION_CHAT_ID,
                f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {str(e)}",
                reply_parameters=reply_params
            )
        except Exception as e2:
            logger.error(f"Also failed to send error message to admin chat: {e2}")
        # –ó–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ /cancel

def process_support_reply(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."""
    admin_id = message.from_user.id
    reply_text = message.text.strip()
    admin_state_info = get_admin_state(admin_id)
    admin_lang = 'uk'

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
    if not admin_state_info or admin_state_info.get('state') != 'awaiting_support_reply':
        logger.warning(f"Admin {admin_id} sent text '{reply_text}' but not in 'awaiting_support_reply' state.")
        if message.reply_to_message and message.reply_to_message.from_user.is_bot:
            try:
                reply_params = ReplyParameters(message_id=message.message_id)
                bot.send_message(message.chat.id, get_text('admin_not_awaiting_support_reply', admin_lang), reply_parameters=reply_params)
            except Exception as e:
                logger.error(f"Failed to send state error to admin {admin_id}: {e}")
        return

    # 2. –û–±—Ä–æ–±–∫–∞ /cancel - –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

    # 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑—ñ —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
    state_data = admin_state_info.get('data', {})
    prompt_message_id = state_data.get('prompt_message_id') # ID –∑–∞–ø–∏—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    original_support_msg_id = state_data.get('support_msg_id') # ID –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞ –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
    target_user_id = state_data.get('target_user_id')

    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    if not target_user_id or not original_support_msg_id:
        logger.error(f"Incomplete data found in admin state 'awaiting_support_reply' for admin {admin_id}. Data: {state_data}")
        try:
            reply_params = ReplyParameters(message_id=original_support_msg_id) if original_support_msg_id else None
            bot.send_message(SUPPORT_CHAT_ID,
                             "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
                             reply_parameters=reply_params)
        except Exception as e:
            logger.error(f"Failed to send data error message to support chat: {e}")
        clear_admin_state(admin_id)
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
        try:
            if prompt_message_id: bot.delete_message(message.chat.id, prompt_message_id)
            bot.delete_message(message.chat.id, message.message_id)
        except: pass
        return

    # 5. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        target_user_data = get_user_data(target_user_id)
        user_lang = target_user_data.get('language', 'uk') if target_user_data else 'uk'
        reply_message_to_user = get_text('support_reply', user_lang).format(reply_text=reply_text)

        bot.send_message(target_user_id, reply_message_to_user, reply_markup=get_main_keyboard(user_lang))
        logger.info(f"Support reply successfully sent to user {target_user_id} by admin {admin_id}")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        reply_params_admin = ReplyParameters(message_id=message.message_id)
        bot.send_message(message.chat.id, get_text('support_reply_sent', admin_lang).format(user_id=target_user_id), reply_parameters=reply_params_admin)

    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"Failed to send support reply to user {target_user_id}: {e}")
        error_text_for_admin = get_text('support_reply_failed', admin_lang).format(user_id=target_user_id, e=f"{e.error_code} - {e.description}")
        try:
            reply_params_err = ReplyParameters(message_id=message.message_id)
            bot.send_message(message.chat.id, error_text_for_admin, reply_parameters=reply_params_err)
        except Exception as e2:
            logger.error(f"Also failed to send error reply to admin {admin_id} in support chat: {e2}")
    except Exception as e:
        logger.error(f"Unexpected error sending support reply to user {target_user_id}: {e}")
        error_text_for_admin = get_text('support_reply_failed', admin_lang).format(user_id=target_user_id, e=str(e))
        try:
            reply_params_err = ReplyParameters(message_id=message.message_id)
            bot.send_message(message.chat.id, error_text_for_admin, reply_parameters=reply_params_err)
        except Exception as e2:
            logger.error(f"Also failed to send error reply to admin {admin_id} in support chat: {e2}")
    finally:
        # 6. –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–¥–º—ñ–Ω–∞
        clear_admin_state(admin_id)
        # 7. –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–∞
        try:
            if prompt_message_id:
                bot.delete_message(message.chat.id, prompt_message_id)
            bot.delete_message(message.chat.id, message.message_id) # –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
            logger.info(f"Deleted support reply prompt and admin reply message in chat {message.chat.id}")
        except Exception as e:
            logger.warning(f"Could not delete support reply messages in chat {message.chat.id}: {e}")


# --- –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å Inline –∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ Inline –∫–Ω–æ–ø–∫–∏."""
    user_id = call.from_user.id # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É
    callback_data = call.data
    message = call.message
    chat_id = message.chat.id

    admin_lang = 'uk' # –ú–æ–≤–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –∞–¥–º—ñ–Ω —á–∞—Ç–∞—Ö

    try:
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback –æ–¥—Ä–∞–∑—É, –∫—Ä—ñ–º –≤–∏–ø–∞–¥–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
        # –¥–µ –º–∏ —Ö–æ—á–µ–º–æ –ø–æ–∫–∞–∑–∞—Ç–∏ alert
        if callback_data != 'check_subscription_callback':
             bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error answering callback query {call.id}: {e}")

    # --- –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω–∞ –≤ —á–∞—Ç—ñ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø ---
    if chat_id == CONFIRMATION_CHAT_ID:
        logger.info(f"Admin {user_id} initiated callback in confirmation chat: {callback_data}")

        match = re.match(r"confirm_(\d+)_(approve_prompt|reject_now|reject_comment)", callback_data)
        if match:
            clicked_text_msg_id = int(match.group(1))
            action = match.group(2)
            logger.info(f"Admin action: {action} for text message {clicked_text_msg_id}")

            deposit_data = confirmation_message_map.get(clicked_text_msg_id)

            if not deposit_data:
                logger.warning(f"Confirmation data not found or already processed for message_id {clicked_text_msg_id}. Callback from admin {user_id}")
                try:
                    bot.edit_message_text(
                        f"{message.text}\n\n---\n‚ö†Ô∏è –ó–∞–ø–∏—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                        chat_id=CONFIRMATION_CHAT_ID,
                        message_id=clicked_text_msg_id,
                        reply_markup=None
                    )
                except Exception as e:
                    logger.error(f"Failed to edit message {clicked_text_msg_id} to show 'already processed': {e}")
                return

            # –î–∞–Ω—ñ, –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ confirmation_message_map
            target_user_id = deposit_data['user_id']
            requested_amount = deposit_data['requested_amount'] # Decimal
            currency_code = deposit_data['currency'] # UAH (–≤–∞–ª—é—Ç–∞ –∑–∞—è–≤–∫–∏)
            photo_msg_id = deposit_data['photo_msg_id']
            method_code = deposit_data.get('method')
            target_username = deposit_data.get('username', 'N/A')
            target_user_lang = deposit_data.get('user_lang', 'uk')
            original_admin_message_text = message.text # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∑–∞–ø–∏—Ç—ñ –∞–¥–º—ñ–Ω—É
            target_user_info = get_user_data(target_user_id)
            target_user_currency = target_user_info.get('currency', 'UAH') if target_user_info else 'UAH'

            try:
                if action == 'approve_prompt':
                    # --- –ó–∞–ø–∏—Ç —Å—É–º–∏ –¥–ª—è –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è ---
                    logger.info(f"Admin {user_id} chose 'approve' for user {target_user_id}. Prompting for amount.")
                    prompt_text = get_text('admin_approve_prompt', admin_lang).format(
                        user_id=target_user_id,
                        username=target_username,
                        currency=currency_code, # –ó–∞–≤–∂–¥–∏ UAH —Ç—É—Ç (–≤–∞–ª—é—Ç–∞, –≤ —è–∫—ñ–π –≤–≤–æ–¥–∏—Ç—å –∞–¥–º—ñ–Ω)
                        requested_amount=f"{requested_amount:.2f}", # –§–æ—Ä–º–∞—Ç—É—î–º–æ Decimal
                        user_currency=target_user_currency # –ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    )
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç —Å—É–º–∏ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
                    reply_params_force = ReplyParameters(message_id=clicked_text_msg_id)
                    prompt_msg = bot.send_message(
                        CONFIRMATION_CHAT_ID,
                        prompt_text,
                        reply_parameters=reply_params_force,
                        reply_markup=types.ForceReply(selective=True)
                    )
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞ (user_id - —Ü–µ ID –∞–¥–º—ñ–Ω–∞, —â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É)
                    admin_data = deposit_data.copy() # –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ
                    admin_data['clicked_text_msg_id'] = clicked_text_msg_id
                    admin_data['original_caption'] = original_admin_message_text
                    admin_data['prompt_message_id'] = prompt_msg.message_id # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∑–∞–ø–∏—Ç—É
                    set_admin_state(user_id, 'awaiting_approve_amount', admin_data)
                    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è –≤ process_approve_amount

                elif action == 'reject_now':
                    # --- –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è ---
                    logger.info(f"Admin {user_id} rejected deposit for {target_user_id} (no comment - reject_now)")
                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (—Å—É–º–∞ –∑–∞—è–≤–ª–µ–Ω–∞)
                    user_notification_text = get_text('deposit_rejected_user', target_user_lang).format(
                        amount=f"{requested_amount:.2f}",
                        currency=get_currency_symbol(currency_code) # UAH
                    )
                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                    admin_confirm_text = get_text('admin_action_confirmed_reject', admin_lang).format(
                        user_id=target_user_id
                    )
                    final_admin_text = f"{original_admin_message_text}\n\n---\n{admin_confirm_text}"
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    try:
                        bot.send_message(target_user_id, user_notification_text, reply_markup=get_main_keyboard(target_user_lang))
                        logger.info(f"Sent 'reject_now' notification to user {target_user_id}")
                    except Exception as e:
                        logger.error(f"Failed to send 'reject_now' notification to user {target_user_id}: {e}")
                        final_admin_text += f"\n\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}"
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
                    bot.edit_message_text(
                        final_admin_text,
                        chat_id=CONFIRMATION_CHAT_ID,
                        message_id=clicked_text_msg_id,
                        reply_markup=None
                    )
                    if clicked_text_msg_id in confirmation_message_map: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
                         del confirmation_message_map[clicked_text_msg_id]
                         logger.info(f"Removed confirmation data for message {clicked_text_msg_id} after reject_now")
                    else:
                         logger.warning(f"Attempted to delete confirmation data for {clicked_text_msg_id}, but it was already removed.")


                elif action == 'reject_comment':
                    # --- –ó–∞–ø–∏—Ç –ø—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è ---
                    logger.info(f"Admin {user_id} chose 'reject with comment' for user {target_user_id}. Prompting for reason.")
                    prompt_text = get_text('admin_rejection_reason_prompt', admin_lang).format(
                        user_id=target_user_id,
                        symbol=REJECT_WITHOUT_REASON_SYMBOL
                    )
                    reply_params_force = ReplyParameters(message_id=clicked_text_msg_id)
                    prompt_msg = bot.send_message(
                        CONFIRMATION_CHAT_ID,
                        prompt_text,
                        reply_parameters=reply_params_force,
                        reply_markup=types.ForceReply(selective=True)
                    )
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞ (user_id - —Ü–µ ID –∞–¥–º—ñ–Ω–∞, —â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É)
                    admin_data = deposit_data.copy()
                    admin_data['clicked_text_msg_id'] = clicked_text_msg_id
                    admin_data['original_caption'] = original_admin_message_text
                    admin_data['prompt_message_id'] = prompt_msg.message_id # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∑–∞–ø–∏—Ç—É
                    set_admin_state(user_id, 'awaiting_rejection_reason', admin_data)
                    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è –≤ process_rejection_reason

            except telebot.apihelper.ApiTelegramException as e:
                logger.error(f"Telegram API error during admin action '{action}' for msg {clicked_text_msg_id}: {e}")
                final_admin_text_on_error = f"{original_admin_message_text}\n\n---\n‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e.error_code}"
                try:
                    bot.edit_message_text(final_admin_text_on_error, chat_id=CONFIRMATION_CHAT_ID, message_id=clicked_text_msg_id, reply_markup=None)
                except Exception as e_edit:
                    logger.error(f"Failed even to edit message {clicked_text_msg_id} with error notice: {e_edit}")
            except Exception as e:
                logger.error(f"Unexpected error during admin action '{action}' for msg {clicked_text_msg_id}: {e}")
                logger.exception("Traceback for admin action error:")
                final_admin_text_on_error = f"{original_admin_message_text}\n\n---\n‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏!"
                try:
                    bot.edit_message_text(final_admin_text_on_error, chat_id=CONFIRMATION_CHAT_ID, message_id=clicked_text_msg_id, reply_markup=None)
                except Exception as e_edit:
                    logger.error(f"Failed even to edit message {clicked_text_msg_id} with error notice: {e_edit}")
        else:
             logger.warning(f"Unknown callback format received in confirmation chat: {callback_data}")
        return # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É

    # --- –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω–∞ –≤ —á–∞—Ç—ñ –ü–Ü–î–¢–†–ò–ú–ö–ò ---
    elif chat_id == SUPPORT_CHAT_ID:
        logger.info(f"Admin {user_id} initiated callback in support chat: {callback_data}")
        reply_match = re.match(r"reply_support_(\d+)_(\d+)", callback_data)
        if reply_match:
            target_user_id = int(reply_match.group(1))
            support_msg_id = int(reply_match.group(2)) # ID –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞ –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
            logger.info(f"Admin {user_id} clicked 'Reply' button for user {target_user_id} on support message {support_msg_id}")

            # –û—Ç—Ä–∏–º—É—î–º–æ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–∞–ø–∏, —è–∫—â–æ —î
            support_info = support_message_map.get(support_msg_id)
            target_username = support_info.get('username', 'N/A') if support_info else 'N/A'

            # –ó–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            prompt_text = get_text('admin_support_reply_prompt', admin_lang).format(
                user_id=target_user_id,
                username=target_username
            )
            try:
                # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –≤ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ
                reply_params_force = ReplyParameters(message_id=support_msg_id)
                prompt_msg = bot.send_message(
                    SUPPORT_CHAT_ID,
                    prompt_text,
                    reply_parameters=reply_params_force,
                    reply_markup=types.ForceReply(selective=True)
                )
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞ (user_id - ID –∞–¥–º—ñ–Ω–∞, —â–æ –Ω–∞—Ç–∏—Å–Ω—É–≤)
                admin_data = {
                    'target_user_id': target_user_id,
                    'support_msg_id': support_msg_id, # ID –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    'prompt_message_id': prompt_msg.message_id # ID –∑–∞–ø–∏—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                }
                set_admin_state(user_id, 'awaiting_support_reply', admin_data)
                logger.info(f"Set admin state to 'awaiting_support_reply' for admin {user_id}")
            except Exception as e:
                logger.error(f"Failed to prompt admin {user_id} for support reply: {e}")
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                bot.send_message(SUPPORT_CHAT_ID, get_text('callback_error', admin_lang))
        else:
             logger.warning(f"Unknown callback format received in support chat: {callback_data}")
        return # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É

    # --- –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ü–†–ò–í–ê–¢–ù–û–ú–£ —á–∞—Ç—ñ ---
    elif chat_id == user_id:
        logger.info(f"User {user_id} initiated callback in private chat: {callback_data}")
        user_data = get_user_data(user_id)
        if not user_data:
            logger.warning(f"Callback query from unknown or uninitialized user {user_id}: {callback_data}")
            try:
                # –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É
                # –ú–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'uk'
                if not check_subscription(user_id):
                    send_subscribe_prompt_in_callback(call, 'uk')
                else:
                    # –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π, –∞–ª–µ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, –ø—Ä–æ—Å–∏–º–æ /start
                    bot.answer_callback_query(call.id)
                    bot.edit_message_text(get_text('callback_user_not_found', 'uk'), chat_id=chat_id, message_id=message.message_id, reply_markup=None)
            except Exception as e:
                logger.error(f"Error handling callback for unknown user {user_id}: {e}")
            return

        lang = user_data.get('language', 'uk')

        # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é –±—É–¥—å-—è–∫–æ–≥–æ callback –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if callback_data != 'check_subscription_callback': # –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∞–º—É –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            if not check_subscription(user_id):
                send_subscribe_prompt_in_callback(call, lang)
                return
        # --- –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---


        user_state_info = get_user_state(user_id)
        state_name = user_state_info.get('state') if user_state_info else None
        state_data = user_state_info.get('data', {}) if user_state_info else {}

        try:
            # --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ ---
            if callback_data == 'check_subscription_callback':
                if check_subscription(user_id):
                    # –ü—ñ–¥–ø–∏—Å–∫–∞ —î, –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                    bot.answer_callback_query(call.id, get_text('subscription_verified', lang))
                    try:
                        bot.delete_message(chat_id, message.message_id)
                    except Exception as e_del:
                         logger.warning(f"Could not delete subscribe prompt message {message.message_id} after successful check: {e_del}")
                    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É
                    start_command(message) # –í–∏–∫–ª–∏–∫–∞—î–º–æ /start –ª–æ–≥—ñ–∫—É
                else:
                    # –ü—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ–º–∞—î, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    bot.answer_callback_query(call.id, get_text('subscription_needed', lang), show_alert=True)
                return # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É —Ü—å–æ–≥–æ callback

            # --- –§–ª–æ—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ---
            elif callback_data.startswith('select_method_'):
                if state_name != 'awaiting_payment_method':
                    logger.warning(f"User {user_id} clicked payment method '{callback_data}' but not in correct state ({state_name}). Ignoring.")
                    bot.send_message(chat_id, get_text('invalid_step', lang), reply_markup=get_main_keyboard(lang))
                    clear_user_state(user_id)
                    try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    except: pass
                    return

                method_code = callback_data.split('_')[-1]
                if method_code in PAYMENT_DETAILS:
                    amount = state_data.get('amount') # Decimal
                    currency_code = state_data.get('currency') # UAH

                    if amount is None or currency_code is None:
                        logger.error(f"Missing amount/currency in state 'awaiting_payment_method' for user {user_id}. State: {state_data}")
                        bot.send_message(chat_id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
                        clear_user_state(user_id)
                        try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                        except: pass
                        return

                    currency_symbol = get_currency_symbol(currency_code)
                    details = PAYMENT_DETAILS[method_code]
                    method_name = get_text(f'payment_method_{method_code}', lang)

                    state_data['method'] = method_code
                    set_user_state(user_id, 'awaiting_screenshot', state_data)

                    instructions = get_text('payment_instructions', lang).format(
                        amount=f"{amount:.2f}", # Format Decimal
                        currency=currency_symbol,
                        method=method_name,
                        details=details
                    )
                    bot.edit_message_text(
                        instructions,
                        chat_id=chat_id,
                        message_id=message.message_id,
                        reply_markup=get_cancel_deposit_keyboard(lang),
                        parse_mode='Markdown'
                    )
                else:
                    logger.error(f"Invalid payment method code in callback: {method_code} from user {user_id}")
                    bot.send_message(chat_id, get_text('callback_error', lang))
                    clear_user_state(user_id)
                    try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    except: pass

            elif callback_data == 'cancel_deposit_amount':
                if state_name == 'awaiting_payment_method':
                    clear_user_state(user_id)
                    bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    bot.send_message(chat_id, get_text('deposit_cancelled', lang), reply_markup=get_main_keyboard(lang))
                else:
                    logger.warning(f"User {user_id} clicked cancel_deposit_amount but not in correct state ({state_name})")
                    try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    except: pass

            elif callback_data == 'cancel_deposit_screenshot':
                if state_name == 'awaiting_screenshot':
                    clear_user_state(user_id)
                    bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    bot.send_message(chat_id, get_text('deposit_cancelled', lang), reply_markup=get_main_keyboard(lang))
                else:
                    logger.warning(f"User {user_id} clicked cancel_deposit_screenshot but not in correct state ({state_name})")
                    try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    except: pass

            elif callback_data == 'back_to_methods':
                if state_name == 'awaiting_screenshot':
                    amount = state_data.get('amount') # Decimal
                    currency_code = state_data.get('currency') # UAH

                    if amount is None or currency_code is None:
                        logger.error(f"Missing amount/currency in state 'awaiting_screenshot' for user {user_id} when going back. State: {state_data}")
                        bot.send_message(chat_id, get_text('callback_error', lang), reply_markup=get_main_keyboard(lang))
                        clear_user_state(user_id)
                        try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                        except: pass
                        return

                    if 'method' in state_data: del state_data['method']
                    set_user_state(user_id, 'awaiting_payment_method', state_data)

                    currency_symbol = get_currency_symbol(currency_code)
                    bot.edit_message_text(
                        get_text('select_payment_method', lang).format(amount=f"{amount:.2f}", currency=currency_symbol),
                        chat_id=chat_id,
                        message_id=message.message_id,
                        reply_markup=get_payment_method_keyboard(lang)
                    )
                else:
                    logger.warning(f"User {user_id} clicked back_to_methods but not in correct state ({state_name})")
                    try: bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                    except: pass

            # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
            elif callback_data == 'settings_change_lang':
                bot.edit_message_text(
                    get_text('select_lang', lang),
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_language_keyboard(lang)
                )
            elif callback_data == 'settings_change_curr':
                bot.edit_message_text(
                    get_text('select_curr', lang),
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_currency_keyboard(lang)
                )
            elif callback_data == 'settings_back':
                try:
                    bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                except Exception as e:
                    logger.warning(f"Could not delete settings message {message.message_id}: {e}")
                # –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∂–µ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–∏–¥–∏–º–∞

            elif callback_data.startswith('set_lang_'):
                new_lang = callback_data.split('_')[-1]
                if new_lang in texts:
                    if update_user_language(user_id, new_lang):
                        try:
                            # --- –ö–õ–Æ–ß–û–í–ê –ó–ú–Ü–ù–ê: –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–∫–∞–∑—É—é—á–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ù–û–í–û–Æ –º–æ–≤–æ—é ---
                            bot.edit_message_text(
                                get_text('settings_menu', new_lang), # –¢–µ–∫—Å—Ç –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–æ–≤–æ—é –º–æ–≤–æ—é
                                chat_id=chat_id,
                                message_id=message.message_id,
                                reply_markup=get_settings_keyboard(new_lang) # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–æ–≤–æ—é –º–æ–≤–æ—é
                            )
                            # --- –ö–õ–Æ–ß–û–í–ê –ó–ú–Ü–ù–ê: –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ó –û–ù–û–í–õ–ï–ù–û–Æ ReplyKeyboard ---
                            bot.send_message(
                                chat_id,
                                get_text('lang_changed', new_lang), # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –º–æ–≤–∏
                                reply_markup=get_main_keyboard(new_lang) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑ –≥–æ–ª–æ–≤–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–æ–≤–æ—é –º–æ–≤–æ—é
                            )
                        except telebot.apihelper.ApiTelegramException as e:
                            if "message is not modified" in str(e).lower():
                                # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–ª–∞—Ü–Ω—É–ª–∏ —Ç—É —Å–∞–º—É –º–æ–≤—É)
                                # –≤—Å–µ –æ–¥–Ω–æ –Ω–∞–¥—ñ—à–ª–µ–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
                                logger.info(f"Language message not modified for user {user_id}, sending confirmation anyway.")
                                try:
                                    bot.send_message(
                                        chat_id,
                                        get_text('lang_changed', new_lang),
                                        reply_markup=get_main_keyboard(new_lang)
                                    )
                                except Exception as send_e:
                                     logger.error(f"Failed to send lang_changed confirmation after 'not modified' error for user {user_id}: {send_e}")
                            else:
                                logger.error(f"Error editing language message or sending confirmation for user {user_id}: {e}")
                                try:
                                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ new_lang, –±–æ —Å—Ç–∞—Ä–∞ –≤–∂–µ –º–æ–≥–ª–∞ –±—É—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î
                                    bot.send_message(chat_id, get_text('callback_error', new_lang))
                                except Exception as send_e:
                                     logger.error(f"Failed even to send callback error message after edit/send failure for user {user_id}: {send_e}")
                        except Exception as e:
                             logger.error(f"Unexpected error after updating language for user {user_id}: {e}")
                             try:
                                 bot.send_message(chat_id, get_text('callback_error', new_lang))
                             except Exception as send_e:
                                 logger.error(f"Failed even to send callback error message after unexpected error for user {user_id}: {send_e}")
                    else:
                        logger.error(f"Failed to update language for user {user_id} to {new_lang} in DB.")
                        try:
                             bot.edit_message_text(
                                 get_text('callback_error', lang), # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –°–¢–ê–†–£ –º–æ–≤—É
                                 chat_id=chat_id,
                                 message_id=message.message_id,
                                 reply_markup=None
                             )
                        except Exception as e_edit:
                            logger.error(f"Failed to edit language message with DB error notice for user {user_id}: {e_edit}")
                else:
                    logger.warning(f"Invalid language code in callback: {new_lang} from user {user_id}")
                    try:
                        bot.edit_message_text(get_text('callback_error', lang), chat_id=chat_id, message_id=message.message_id, reply_markup=None)
                    except Exception as e_edit:
                         logger.error(f"Failed to edit language message with invalid code error notice for user {user_id}: {e_edit}")

            elif callback_data.startswith('set_curr_'):
                new_curr = callback_data.split('_')[-1]
                if new_curr in currencies:
                    success, new_balance = update_user_currency(user_id, new_curr) # –û–Ω–æ–≤–ª—é—î –≤–∞–ª—é—Ç—É —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –±–∞–ª–∞–Ω—Å
                    if success and new_balance is not None:
                        new_currency_symbol = get_currency_symbol(new_curr)
                        confirmation_text = get_text('curr_changed', lang).format(
                            currency=new_curr, # –ö–æ–¥ –≤–∞–ª—é—Ç–∏
                            balance=f"{new_balance:.2f}", # –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
                            currency_symbol=new_currency_symbol # –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏
                        )
                        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                        bot.edit_message_text(
                            confirmation_text + "\n\n" + get_text('settings_menu', lang),
                            chat_id=chat_id,
                            message_id=message.message_id,
                            reply_markup=get_settings_keyboard(lang) # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—ñ–π –º–æ–≤—ñ —Ç—É—Ç, –∞–ª–µ ReplyKeyboard –æ–Ω–æ–≤–ª–µ–Ω–∞
                        )
                    else:
                        # –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞ –≤ update_user_currency/convert_currency
                        error_msg = get_text('callback_error', lang) + f"\n{get_text('currency_conversion_error', lang).format(from_curr=user_data.get('currency', 'N/A'), to_curr=new_curr)}"
                        try:
                            # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
                            bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                            bot.send_message(chat_id, error_msg, reply_markup=get_main_keyboard(lang))
                            # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–Ω–æ–≤—É (–∞–±–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é)
                            # show_settings(message, lang) # –¶–µ –Ω–µ —Å–ø—Ä–∞—Ü—é—î, –±–æ message —Ç—É—Ç - —Ü–µ callback query message
                            bot.send_message(chat_id, get_text('main_menu', lang), reply_markup=get_main_keyboard(lang))
                        except Exception as e_err:
                            logger.error(f"Failed to send currency conversion error to user {user_id}: {e_err}")

                else:
                    logger.warning(f"Invalid currency code in callback: {new_curr}")
                    bot.send_message(chat_id, get_text('callback_error', lang))

            elif callback_data == 'lang_back' or callback_data == 'curr_back':
                bot.edit_message_text(
                    get_text('settings_menu', lang),
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_settings_keyboard(lang)
                )

            # --- –ö—É–ø—ñ–≤–ª—è –Ω–æ–º–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞) ---
            elif callback_data.startswith('buy_country_'):
                country_code = callback_data.split('_')[-1]
                country_name_key = f'country_{country_code.lower()}'
                country_name = get_text(country_name_key, lang)
                bot.edit_message_text(
                    get_text('country_selected', lang).format(country=country_name),
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_back_button('buy_back', lang)
                )
            elif callback_data == 'buy_back':
                bot.edit_message_text(
                    get_text('choose_country', lang),
                    chat_id=chat_id,
                    message_id=message.message_id,
                    reply_markup=get_country_keyboard(lang)
                )

            else:
                logger.warning(f"Unhandled callback_data from user {user_id} in private chat: {callback_data}")

        # --- –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ Telegram API ---
        except telebot.apihelper.ApiTelegramException as e:
            error_message = str(e).lower()
            if "message to edit not found" in error_message: logger.warning(f"Message {message.message_id} not found for editing (callback {callback_data}).")
            elif "message is not modified" in error_message: logger.info(f"Message {message.message_id} not modified (callback {callback_data}).")
            elif "message to delete not found" in error_message: logger.warning(f"Message {message.message_id} not found for deleting (callback {callback_data}).")
            elif "chat not found" in error_message or "bot was blocked" in error_message or "user is deactivated" in error_message: logger.warning(f"Cannot interact with user {user_id} (callback {callback_data}): {e}")
            else:
                logger.error(f"Telegram API error on callback {callback_data} from user {user_id}: {e}")
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ
                try: bot.send_message(user_id, get_text('callback_error', lang))
                except Exception as send_e: logger.error(f"Failed even to send callback error message to user {user_id}: {send_e}")
        # --- –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ ---
        except Exception as e:
            logger.error(f"Error processing callback {callback_data} from user {user_id}: {e}")
            logger.exception("Traceback for callback processing error:")
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ
            try: bot.send_message(user_id, get_text('callback_error', lang))
            except Exception as send_e: logger.error(f"Failed even to send callback error message to user {user_id}: {send_e}")

    # --- –Ø–∫—â–æ callback –ø—Ä–∏–π—à–æ–≤ –∑ –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —á–∞—Ç—É ---
    else:
        logger.warning(f"Callback {callback_data} received in unexpected chat {chat_id} from user {user_id}. Ignoring.")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (–ß–ï–†–ï–ó REPLY) ---
@bot.message_handler(func=lambda message: message.chat.id == SUPPORT_CHAT_ID and \
                                         message.reply_to_message is not None and \
                                         message.reply_to_message.from_user.is_bot and \
                                         # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –Ω–∞—à—ñ–π –º–∞–ø—ñ
                                         message.reply_to_message.message_id in support_message_map,
                       content_types=['text'])
def handle_support_reply_via_reply(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–∞—Ç—ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (—á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é 'reply')."""
    admin = message.from_user
    reply_text = message.text # –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–∞
    original_bot_message_id = message.reply_to_message.message_id
    admin_lang = 'uk'

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–¥–º—ñ–Ω –Ω–µ –≤ —Å—Ç–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏)
    admin_state = get_admin_state(admin.id)
    if admin_state and admin_state.get('state') == 'awaiting_support_reply' and admin_state.get('data', {}).get('support_msg_id') == original_bot_message_id:
        logger.info(f"Admin {admin.id} replied via REPLY to support message {original_bot_message_id}, but state 'awaiting_support_reply' is active. Letting state handler process it.")
        return # –î–æ–∑–≤–æ–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫—É —Å—Ç–∞–Ω—É process_support_reply —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏

    logger.info(f"Admin {admin.id} replied VIA REPLY in support chat to bot message {original_bot_message_id}")
    logger.debug(f"Looking for message_id {original_bot_message_id} in support map: {support_message_map}")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ username
    support_info = support_message_map.get(original_bot_message_id)

    if support_info and 'user_id' in support_info:
        target_user_id = support_info['user_id']
        try:
            user_data = get_user_data(target_user_id)
            lang = user_data.get('language', 'uk') if user_data else 'uk'
            reply_message_to_user = get_text('support_reply', lang).format(reply_text=reply_text)

            bot.send_message(target_user_id, reply_message_to_user, reply_markup=get_main_keyboard(lang))
            logger.info(f"Support reply (via reply) successfully sent to user {target_user_id}")

            reply_params = ReplyParameters(message_id=message.message_id)
            bot.send_message(message.chat.id, get_text('support_reply_sent', admin_lang).format(user_id=target_user_id), reply_parameters=reply_params)
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"Failed to send support reply (via reply) to user {target_user_id}: {e}")
            error_text_for_admin = get_text('support_reply_failed', admin_lang).format(user_id=target_user_id, e=f"{e.error_code} - {e.description}")
            try:
                reply_params_err = ReplyParameters(message_id=message.message_id)
                bot.send_message(message.chat.id, error_text_for_admin, reply_parameters=reply_params_err)
            except Exception as e2: logger.error(f"Also failed to send error reply to admin {admin.id}: {e2}")
        except Exception as e:
            logger.error(f"Unexpected error sending support reply (via reply) to user {target_user_id}: {e}")
            error_text_for_admin = get_text('support_reply_failed', admin_lang).format(user_id=target_user_id, e=str(e))
            try:
                reply_params_err = ReplyParameters(message_id=message.message_id)
                bot.send_message(message.chat.id, error_text_for_admin, reply_parameters=reply_params_err)
            except Exception as e2: logger.error(f"Also failed to send error reply to admin {admin.id}: {e2}")
    else:
        logger.warning(f"Could not find original user_id for replied message {original_bot_message_id} in support chat (via reply). Map: {support_message_map}")
        try:
            reply_params = ReplyParameters(message_id=message.message_id)
            bot.send_message(message.chat.id, get_text('support_user_not_found', admin_lang), reply_parameters=reply_params)
        except Exception as e: logger.error(f"Failed to notify admin about user not found for msg {original_bot_message_id}: {e}")


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å—Ç–∞–Ω–∏) ---
@bot.message_handler(func=lambda message: message.chat.id in [SUPPORT_CHAT_ID, CONFIRMATION_CHAT_ID] and \
                                         message.reply_to_message is not None and \
                                         message.reply_to_message.from_user.is_bot,
                       content_types=['text'])
def handle_admin_state_replies(message):
      """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ –±–æ—Ç–∞ (–ø—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, —Å—É–º–∞ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏)."""
      admin_id = message.from_user.id
      admin_state = get_admin_state(admin_id)
      prompt_message_id = message.reply_to_message.message_id # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –∞–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–≤

      if not admin_state:
            logger.debug(f"Admin {admin_id} replied to bot message {prompt_message_id}, but no active admin state found.")
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (–¥–ª—è reply flow)
            if message.chat.id == SUPPORT_CHAT_ID and prompt_message_id in support_message_map:
                handle_support_reply_via_reply(message) # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π reply
            return # –ê–¥–º—ñ–Ω –Ω–µ –≤ —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è

      current_state = admin_state.get('state')
      state_prompt_id = admin_state.get('data', {}).get('prompt_message_id')

      # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥—ñ–π—Å–Ω–æ –Ω–∞ —Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º–∏ –æ—á—ñ–∫—É–≤–∞–ª–∏ –≤ –ø–æ—Ç–æ—á–Ω–º—É —Å—Ç–∞–Ω—ñ
      if state_prompt_id != prompt_message_id:
            logger.warning(f"Admin {admin_id} replied to message {prompt_message_id}, but expected reply to {state_prompt_id} for state {current_state}. Ignoring state handler.")
            # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ (–¥–ª—è reply flow)
            if message.chat.id == SUPPORT_CHAT_ID and prompt_message_id in support_message_map:
                handle_support_reply_via_reply(message) # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π reply
            return

      logger.info(f"Processing admin {admin_id} reply for state {current_state} to prompt {prompt_message_id}")

      if current_state == 'awaiting_rejection_reason' and message.chat.id == CONFIRMATION_CHAT_ID:
            process_rejection_reason(message)
      elif current_state == 'awaiting_approve_amount' and message.chat.id == CONFIRMATION_CHAT_ID:
            process_approve_amount(message)
      elif current_state == 'awaiting_support_reply' and message.chat.id == SUPPORT_CHAT_ID:
            process_support_reply(message)
      else:
            logger.warning(f"Admin {admin_id} is in state {current_state}, but reply came from unexpected chat {message.chat.id} or state not handled here.")


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É ---
def main():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("Initializing database...")
    initialize_db()
    logger.info(f"Bot Owner Admin ID: {ADMIN_ID}")
    logger.info(f"Support Chat ID: {SUPPORT_CHAT_ID}")
    logger.info(f"Confirmation Chat ID: {CONFIRMATION_CHAT_ID}")
    logger.info(f"Payment Details Loaded: {list(PAYMENT_DETAILS.keys())}")
    logger.info(f"Exchange Rates To UAH: {EXCHANGE_RATES_TO_UAH}")
    logger.info(f"Exchange Rates From UAH: {EXCHANGE_RATES_FROM_UAH}")

    try:
        me = bot.get_me()
        logger.info(f"Starting bot polling for: @{me.username} (ID: {me.id})...")
    except Exception as e:
        logger.error(f"Could not get bot info. Check token or network. Error: {e}")
        return

    while True:
        try:
            logger.info("Starting long polling...")
            bot.infinity_polling(logger_level=logging.INFO, # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ logging.DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏—Ö –ª–æ–≥—ñ–≤
                                 timeout=30,
                                 long_polling_timeout=30)
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"Telegram API Exception during polling: {e}")
            if "Unauthorized" in str(e):
                logger.error("BOT TOKEN IS INVALID. Stopping.")
                break
            elif "Too Many Requests" in str(e) or "Flood control" in str(e):
                sleep_time = 30
                logger.warning(f"Too Many Requests/Flood control error. Sleeping for {sleep_time} seconds...")
                time.sleep(sleep_time)
            elif "Conflict: terminated by other getUpdates" in str(e):
                logger.warning("Conflict detected. Another instance might be running. Waiting 60 seconds before retry.")
                time.sleep(60)
            else:
                sleep_time = 15
                logger.warning(f"Restarting polling in {sleep_time} seconds due to API exception: {e}")
                time.sleep(sleep_time)
        except requests.exceptions.ReadTimeout as e:
            logger.warning(f"Polling ReadTimeout: {e}. Retrying after 5 seconds.")
            time.sleep(5)
        except requests.exceptions.ConnectionError as e:
            sleep_time = 30
            logger.warning(f"Polling ConnectionError: {e}. Retrying in {sleep_time} seconds...")
            time.sleep(sleep_time)
        except Exception as e:
            logger.error(f"Bot polling failed with unexpected error: {e}")
            logger.error(traceback.format_exc())
            sleep_time = 60
            logger.info(f"Restarting polling in {sleep_time} seconds...")
            time.sleep(sleep_time)
        else:
            logger.info("Infinity polling finished gracefully (should not happen). Restarting after 10 seconds.")
            time.sleep(2000)

if __name__ == "__main__":
    main()